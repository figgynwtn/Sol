"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/SolarSystemVisualization.tsx":
/*!*****************************************************!*\
  !*** ./src/components/SolarSystemVisualization.tsx ***!
  \*****************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ SolarSystemVisualization; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3 */ \"(app-pages-browser)/./node_modules/d3/src/index.js\");\n/* harmony import */ var _data_planets__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/data/planets */ \"(app-pages-browser)/./src/data/planets.ts\");\n/* harmony import */ var _lib_orbital_mechanics__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/orbital-mechanics */ \"(app-pages-browser)/./src/lib/orbital-mechanics.ts\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\nfunction SolarSystemVisualization(param) {\n    let { width = 900, height = 700, isPlaying = false, speedMultiplier = 1000, onPlanetClick, selectedPlanet } = param;\n    _s();\n    const svgRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const animationRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    const startTimeRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(Date.now());\n    const [isMobile, setIsMobile] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [planetPositions, setPlanetPositions] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(new Map());\n    const [starPositions, setStarPositions] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    // Center of the solar system\n    const centerX = width / 2;\n    const centerY = height / 2;\n    // Create equal orbital spacing for visual clarity\n    const availableRadius = Math.min(width, height) / 2 - 80; // Leave 80px margin\n    const orbitSpacing = availableRadius / _data_planets__WEBPACK_IMPORTED_MODULE_3__.PLANETS.length; // Equal spacing between orbits\n    console.log(\"\\uD83D\\uDCCF DEBUG: Equal orbital spacing\", {\n        availableRadius,\n        orbitSpacing: orbitSpacing.toFixed(2),\n        planetCount: _data_planets__WEBPACK_IMPORTED_MODULE_3__.PLANETS.length,\n        svgSize: {\n            width,\n            height\n        }\n    });\n    // Check if we're on a mobile device\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const checkMobile = ()=>{\n            setIsMobile(window.innerWidth < 768 || \"ontouchstart\" in window);\n        };\n        checkMobile();\n        window.addEventListener(\"resize\", checkMobile);\n        return ()=>window.removeEventListener(\"resize\", checkMobile);\n    }, []);\n    // Initialize star positions once (consistent across redraws)\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (starPositions.length === 0) {\n            const stars = [];\n            for(let i = 0; i < 200; i++){\n                stars.push({\n                    x: Math.random() * width,\n                    y: Math.random() * height,\n                    r: Math.random() * 1.5,\n                    opacity: 0.3 + Math.random() * 0.7\n                });\n            }\n            setStarPositions(stars);\n            console.log(\"✨ DEBUG: Initialized star positions\", {\n                count: stars.length\n            });\n        }\n    }, [\n        width,\n        height,\n        starPositions.length\n    ]);\n    // Initialize planet positions\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"\\uD83D\\uDD0D DEBUG: Initializing planet positions\");\n        const positions = new Map();\n        // Set initial positions for all planets\n        _data_planets__WEBPACK_IMPORTED_MODULE_3__.PLANETS.forEach((planet, index)=>{\n            const angle = 0; // Starting angle\n            const orbitRadius = orbitSpacing * (index + 1); // Equal spacing, starting from orbitSpacing\n            const x = centerX + orbitRadius * Math.cos(angle);\n            const y = centerY + orbitRadius * Math.sin(angle);\n            positions.set(planet.id, {\n                x,\n                y\n            });\n            console.log(\"\\uD83E\\uDE90 DEBUG: \".concat(planet.name, \" initial position\"), {\n                x: Math.round(x),\n                y: Math.round(y),\n                angle,\n                orbitRadius: Math.round(orbitRadius),\n                orbitIndex: index + 1\n            });\n        });\n        setPlanetPositions(positions);\n    }, [\n        centerX,\n        centerY\n    ]);\n    // Animation loop - ONLY when isPlaying is true\n    const animate = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (!isPlaying) {\n            console.log(\"\\uD83D\\uDED1 DEBUG: Animation stopped - isPlaying is false\");\n            return;\n        }\n        const now = Date.now();\n        const elapsed = (now - startTimeRef.current) / 1000; // Convert to seconds\n        const scaledElapsed = elapsed * (speedMultiplier / 1000);\n        console.log(\"\\uD83D\\uDD04 DEBUG: Animation frame\", {\n            elapsed,\n            scaledElapsed,\n            isPlaying,\n            planetCount: planetPositions.size\n        });\n        const newPositions = new Map();\n        // Visual scaling factor for orbital periods (makes planets move faster for better visualization)\n        const VISUAL_ORBITAL_SCALE = 0.01; // Scale down orbital periods by 99%\n        _data_planets__WEBPACK_IMPORTED_MODULE_3__.PLANETS.forEach((planet, index)=>{\n            const visualOrbitalPeriod = planet.orbitalPeriod * VISUAL_ORBITAL_SCALE;\n            const angle = scaledElapsed / visualOrbitalPeriod * 2 * Math.PI;\n            const orbitRadius = orbitSpacing * (index + 1); // Equal spacing\n            const x = centerX + orbitRadius * Math.cos(angle);\n            const y = centerY + orbitRadius * Math.sin(angle);\n            newPositions.set(planet.id, {\n                x,\n                y\n            });\n            console.log(\"\\uD83E\\uDE90 DEBUG: \".concat(planet.name, \" position\"), {\n                id: planet.id,\n                orbitalPeriod: planet.orbitalPeriod,\n                visualOrbitalPeriod: visualOrbitalPeriod,\n                angle: angle.toFixed(3),\n                orbitRadius: Math.round(orbitRadius),\n                orbitIndex: index + 1,\n                x: Math.round(x),\n                y: Math.round(y)\n            });\n        });\n        setPlanetPositions(newPositions);\n        // Continue animation loop\n        animationRef.current = requestAnimationFrame(animate);\n    }, [\n        isPlaying,\n        speedMultiplier,\n        centerX,\n        centerY,\n        distanceScale\n    ]);\n    // Start/stop animation based on isPlaying\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"\\uD83D\\uDD0D DEBUG: Animation control effect\", {\n            isPlaying\n        });\n        if (isPlaying) {\n            startTimeRef.current = Date.now(); // Reset start time\n            animationRef.current = requestAnimationFrame(animate);\n        } else {\n            if (animationRef.current) {\n                cancelAnimationFrame(animationRef.current);\n            }\n        }\n        return ()=>{\n            if (animationRef.current) {\n                cancelAnimationFrame(animationRef.current);\n            }\n        };\n    }, [\n        isPlaying,\n        animate\n    ]);\n    // Render the solar system - COMPLETELY STATIC\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!svgRef.current) return;\n        console.log(\"\\uD83D\\uDD0D DEBUG: Rendering solar system\", {\n            isPlaying\n        });\n        const svg = d3__WEBPACK_IMPORTED_MODULE_2__.select(svgRef.current);\n        svg.selectAll(\"*\").remove(); // Clear previous content\n        // Create main group\n        const g = svg.append(\"g\");\n        // Draw static background\n        g.append(\"rect\").attr(\"width\", width).attr(\"height\", height).attr(\"fill\", \"#000\");\n        // Draw static stars (using consistent positions)\n        if (starPositions.length > 0) {\n            starPositions.forEach((star)=>{\n                g.append(\"circle\").attr(\"cx\", star.x).attr(\"cy\", star.y).attr(\"r\", star.r).attr(\"fill\", \"white\").attr(\"opacity\", star.opacity);\n            });\n        }\n        // Draw sun - STATIC\n        g.append(\"circle\").attr(\"cx\", centerX).attr(\"cy\", centerY).attr(\"r\", _data_planets__WEBPACK_IMPORTED_MODULE_3__.SUN_RADIUS).attr(\"fill\", \"#FDB813\").attr(\"stroke\", \"#FFA000\").attr(\"stroke-width\", 2);\n        // Draw orbit paths - STATIC\n        _data_planets__WEBPACK_IMPORTED_MODULE_3__.PLANETS.forEach((planet)=>{\n            const orbitRadius = planet.distanceFromSun * distanceScale; // Use calculated scale\n            g.append(\"circle\").attr(\"cx\", centerX).attr(\"cy\", centerY).attr(\"r\", orbitRadius).attr(\"fill\", \"none\").attr(\"stroke\", \"rgba(255, 255, 255, 0.2)\").attr(\"stroke-width\", 1);\n        });\n        // Draw planets - STATIC\n        if (planetPositions.size > 0) {\n            _data_planets__WEBPACK_IMPORTED_MODULE_3__.PLANETS.forEach((planet)=>{\n                const position = planetPositions.get(planet.id);\n                if (!position) return;\n                const planetRadius = (0,_lib_orbital_mechanics__WEBPACK_IMPORTED_MODULE_4__.calculatePlanetRadius)(planet);\n                // Planet circle\n                g.append(\"circle\").attr(\"id\", \"planet-\".concat(planet.id)).attr(\"cx\", position.x).attr(\"cy\", position.y).attr(\"r\", planetRadius).attr(\"fill\", planet.color).attr(\"stroke\", (selectedPlanet === null || selectedPlanet === void 0 ? void 0 : selectedPlanet.id) === planet.id ? \"#fff\" : \"none\").attr(\"stroke-width\", (selectedPlanet === null || selectedPlanet === void 0 ? void 0 : selectedPlanet.id) === planet.id ? 2 : 0).style(\"cursor\", \"pointer\").on(\"click\", ()=>onPlanetClick === null || onPlanetClick === void 0 ? void 0 : onPlanetClick(planet));\n                // Planet label\n                g.append(\"text\").attr(\"id\", \"label-\".concat(planet.id)).attr(\"x\", position.x).attr(\"y\", position.y + planetRadius + 15).attr(\"text-anchor\", \"middle\").attr(\"fill\", \"white\").attr(\"font-size\", \"12px\").attr(\"font-weight\", \"500\").text(planet.name);\n            });\n        } else {\n            console.log(\"\\uD83D\\uDD0D DEBUG: Skipping planet drawing - positions not initialized yet\");\n        }\n    }, [\n        width,\n        height,\n        planetPositions,\n        selectedPlanet,\n        onPlanetClick,\n        centerX,\n        centerY\n    ]);\n    // Redraw solar system when planet positions are initialized\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (planetPositions.size > 0 && svgRef.current) {\n            console.log(\"\\uD83D\\uDD0D DEBUG: Planet positions initialized, redrawing solar system\");\n            const svg = d3__WEBPACK_IMPORTED_MODULE_2__.select(svgRef.current);\n            svg.selectAll(\"*\").remove(); // Clear previous content\n            // Recreate the entire solar system\n            const g = svg.append(\"g\");\n            // Draw static background\n            g.append(\"rect\").attr(\"width\", width).attr(\"height\", height).attr(\"fill\", \"#000\");\n            // Draw static stars (using consistent positions)\n            starPositions.forEach((star)=>{\n                g.append(\"circle\").attr(\"cx\", star.x).attr(\"cy\", star.y).attr(\"r\", star.r).attr(\"fill\", \"white\").attr(\"opacity\", star.opacity);\n            });\n            // Draw sun\n            g.append(\"circle\").attr(\"cx\", centerX).attr(\"cy\", centerY).attr(\"r\", _data_planets__WEBPACK_IMPORTED_MODULE_3__.SUN_RADIUS).attr(\"fill\", \"#FDB813\").attr(\"stroke\", \"#FFA000\").attr(\"stroke-width\", 2);\n            // Draw orbit paths\n            _data_planets__WEBPACK_IMPORTED_MODULE_3__.PLANETS.forEach((planet)=>{\n                const orbitRadius = planet.distanceFromSun * distanceScale; // Use calculated scale\n                g.append(\"circle\").attr(\"cx\", centerX).attr(\"cy\", centerY).attr(\"r\", orbitRadius).attr(\"fill\", \"none\").attr(\"stroke\", \"rgba(255, 255, 255, 0.2)\").attr(\"stroke-width\", 1);\n            });\n            // Draw planets\n            _data_planets__WEBPACK_IMPORTED_MODULE_3__.PLANETS.forEach((planet)=>{\n                const position = planetPositions.get(planet.id);\n                if (!position) return;\n                const planetRadius = (0,_lib_orbital_mechanics__WEBPACK_IMPORTED_MODULE_4__.calculatePlanetRadius)(planet);\n                // Planet circle\n                g.append(\"circle\").attr(\"id\", \"planet-\".concat(planet.id)).attr(\"cx\", position.x).attr(\"cy\", position.y).attr(\"r\", planetRadius).attr(\"fill\", planet.color).attr(\"stroke\", (selectedPlanet === null || selectedPlanet === void 0 ? void 0 : selectedPlanet.id) === planet.id ? \"#fff\" : \"none\").attr(\"stroke-width\", (selectedPlanet === null || selectedPlanet === void 0 ? void 0 : selectedPlanet.id) === planet.id ? 2 : 0).style(\"cursor\", \"pointer\").on(\"click\", ()=>onPlanetClick === null || onPlanetClick === void 0 ? void 0 : onPlanetClick(planet));\n                // Planet label\n                g.append(\"text\").attr(\"id\", \"label-\".concat(planet.id)).attr(\"x\", position.x).attr(\"y\", position.y + planetRadius + 15).attr(\"text-anchor\", \"middle\").attr(\"fill\", \"white\").attr(\"font-size\", \"12px\").attr(\"font-weight\", \"500\").text(planet.name);\n            });\n        }\n    }, [\n        planetPositions,\n        width,\n        height,\n        selectedPlanet,\n        onPlanetClick,\n        centerX,\n        centerY\n    ]);\n    // Update planet positions in D3 SVG when planetPositions changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!svgRef.current) return;\n        console.log(\"\\uD83D\\uDD0D DEBUG: Updating planet positions in SVG\", {\n            planetPositions: planetPositions.size,\n            isPlaying\n        });\n        const svg = d3__WEBPACK_IMPORTED_MODULE_2__.select(svgRef.current);\n        // Update planet positions\n        _data_planets__WEBPACK_IMPORTED_MODULE_3__.PLANETS.forEach((planet)=>{\n            const position = planetPositions.get(planet.id);\n            if (!position) {\n                console.log(\"⚠️ DEBUG: No position found for planet \".concat(planet.name));\n                return;\n            }\n            // Update planet circle position\n            const planetElement = svg.select(\"#planet-\".concat(planet.id));\n            if (planetElement.empty()) {\n                console.log(\"⚠️ DEBUG: Planet element #planet-\".concat(planet.id, \" not found\"));\n            } else {\n                planetElement.attr(\"cx\", position.x).attr(\"cy\", position.y);\n                console.log(\"✅ DEBUG: Updated \".concat(planet.name, \" position to\"), {\n                    x: Math.round(position.x),\n                    y: Math.round(position.y)\n                });\n            }\n            // Update planet label position\n            const planetRadius = (0,_lib_orbital_mechanics__WEBPACK_IMPORTED_MODULE_4__.calculatePlanetRadius)(planet);\n            const labelElement = svg.select(\"#label-\".concat(planet.id));\n            if (labelElement.empty()) {\n                console.log(\"⚠️ DEBUG: Label element #label-\".concat(planet.id, \" not found\"));\n            } else {\n                labelElement.attr(\"x\", position.x).attr(\"y\", position.y + planetRadius + 15);\n            }\n        });\n    }, [\n        planetPositions\n    ]);\n    // DEBUG: Log isPlaying changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"\\uD83D\\uDD0D DEBUG: isPlaying changed\", {\n            isPlaying\n        });\n    }, [\n        isPlaying\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"w-full h-full\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                ref: svgRef,\n                width: width,\n                height: height,\n                className: \"w-full h-full\",\n                style: {\n                    background: \"#000\",\n                    border: \"1px solid #333\"\n                }\n            }, void 0, false, {\n                fileName: \"/Users/hannahnewton/Projects/Sol/src/components/SolarSystemVisualization.tsx\",\n                lineNumber: 397,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"text-white text-sm p-2\",\n                children: [\n                    \"DEBUG: isPlaying = \",\n                    isPlaying ? \"true\" : \"false\"\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/hannahnewton/Projects/Sol/src/components/SolarSystemVisualization.tsx\",\n                lineNumber: 407,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/hannahnewton/Projects/Sol/src/components/SolarSystemVisualization.tsx\",\n        lineNumber: 396,\n        columnNumber: 5\n    }, this);\n}\n_s(SolarSystemVisualization, \"d+d8gIqsZmbl8eS6NafJPqLGDK0=\");\n_c = SolarSystemVisualization;\nvar _c;\n$RefreshReg$(_c, \"SolarSystemVisualization\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/SolarSystemVisualization.tsx\n"));

/***/ })

});