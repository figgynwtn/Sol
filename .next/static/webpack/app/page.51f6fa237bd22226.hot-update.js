"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/SolarSystemVisualization.tsx":
/*!*****************************************************!*\
  !*** ./src/components/SolarSystemVisualization.tsx ***!
  \*****************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ SolarSystemVisualization; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3 */ \"(app-pages-browser)/./node_modules/d3/src/index.js\");\n/* harmony import */ var _data_planets__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/data/planets */ \"(app-pages-browser)/./src/data/planets.ts\");\n/* harmony import */ var _lib_orbital_mechanics__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/orbital-mechanics */ \"(app-pages-browser)/./src/lib/orbital-mechanics.ts\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\nfunction SolarSystemVisualization(param) {\n    let { width = 900, height = 700, isPlaying = false, speedMultiplier = 1000, onPlanetClick, selectedPlanet } = param;\n    _s();\n    const svgRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const animationRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    const startTimeRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(Date.now());\n    const [isMobile, setIsMobile] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [planetPositions, setPlanetPositions] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(new Map());\n    const [starPositions, setStarPositions] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    // Center of the solar system\n    const centerX = width / 2;\n    const centerY = height / 2;\n    // Check if we're on a mobile device\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const checkMobile = ()=>{\n            setIsMobile(window.innerWidth < 768 || \"ontouchstart\" in window);\n        };\n        checkMobile();\n        window.addEventListener(\"resize\", checkMobile);\n        return ()=>window.removeEventListener(\"resize\", checkMobile);\n    }, []);\n    // Initialize star positions once (consistent across redraws)\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (starPositions.length === 0) {\n            const stars = [];\n            for(let i = 0; i < 200; i++){\n                stars.push({\n                    x: Math.random() * width,\n                    y: Math.random() * height,\n                    r: Math.random() * 1.5,\n                    opacity: 0.3 + Math.random() * 0.7\n                });\n            }\n            setStarPositions(stars);\n            console.log(\"✨ DEBUG: Initialized star positions\", {\n                count: stars.length\n            });\n        }\n    }, [\n        width,\n        height,\n        starPositions.length\n    ]);\n    // Initialize planet positions\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"\\uD83D\\uDD0D DEBUG: Initializing planet positions\");\n        const positions = new Map();\n        // Set initial positions for all planets\n        _data_planets__WEBPACK_IMPORTED_MODULE_3__.PLANETS.forEach((planet)=>{\n            const angle = 0; // Starting angle\n            const orbitRadius = planet.distanceFromSun * 100; // Scale up for visualization\n            const x = centerX + orbitRadius * Math.cos(angle);\n            const y = centerY + orbitRadius * Math.sin(angle);\n            positions.set(planet.id, {\n                x,\n                y\n            });\n            console.log(\"\\uD83E\\uDE90 DEBUG: \".concat(planet.name, \" initial position\"), {\n                x,\n                y,\n                angle,\n                orbitRadius\n            });\n        });\n        setPlanetPositions(positions);\n    }, [\n        centerX,\n        centerY\n    ]);\n    // Animation loop - ONLY when isPlaying is true\n    const animate = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (!isPlaying) {\n            console.log(\"\\uD83D\\uDED1 DEBUG: Animation stopped - isPlaying is false\");\n            return;\n        }\n        const now = Date.now();\n        const elapsed = (now - startTimeRef.current) / 1000; // Convert to seconds\n        const scaledElapsed = elapsed * (speedMultiplier / 1000);\n        console.log(\"\\uD83D\\uDD04 DEBUG: Animation frame\", {\n            elapsed,\n            scaledElapsed,\n            isPlaying,\n            planetCount: planetPositions.size\n        });\n        const newPositions = new Map();\n        // Visual scaling factor for orbital periods (makes planets move faster for better visualization)\n        const VISUAL_ORBITAL_SCALE = 0.01; // Scale down orbital periods by 99%\n        _data_planets__WEBPACK_IMPORTED_MODULE_3__.PLANETS.forEach((planet)=>{\n            const visualOrbitalPeriod = planet.orbitalPeriod * VISUAL_ORBITAL_SCALE;\n            const angle = scaledElapsed / visualOrbitalPeriod * 2 * Math.PI;\n            const orbitRadius = planet.distanceFromSun * 100; // Scale up for visualization\n            const x = centerX + orbitRadius * Math.cos(angle);\n            const y = centerY + orbitRadius * Math.sin(angle);\n            newPositions.set(planet.id, {\n                x,\n                y\n            });\n            console.log(\"\\uD83E\\uDE90 DEBUG: \".concat(planet.name, \" position\"), {\n                id: planet.id,\n                orbitalPeriod: planet.orbitalPeriod,\n                visualOrbitalPeriod: visualOrbitalPeriod,\n                angle: angle.toFixed(3),\n                x: Math.round(x),\n                y: Math.round(y)\n            });\n        });\n        setPlanetPositions(newPositions);\n        // Continue animation loop\n        animationRef.current = requestAnimationFrame(animate);\n    }, [\n        isPlaying,\n        speedMultiplier,\n        centerX,\n        centerY\n    ]);\n    // Start/stop animation based on isPlaying\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"\\uD83D\\uDD0D DEBUG: Animation control effect\", {\n            isPlaying\n        });\n        if (isPlaying) {\n            startTimeRef.current = Date.now(); // Reset start time\n            animationRef.current = requestAnimationFrame(animate);\n        } else {\n            if (animationRef.current) {\n                cancelAnimationFrame(animationRef.current);\n            }\n        }\n        return ()=>{\n            if (animationRef.current) {\n                cancelAnimationFrame(animationRef.current);\n            }\n        };\n    }, [\n        isPlaying,\n        animate\n    ]);\n    // Render the solar system - COMPLETELY STATIC\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!svgRef.current) return;\n        console.log(\"\\uD83D\\uDD0D DEBUG: Rendering solar system\", {\n            isPlaying\n        });\n        const svg = d3__WEBPACK_IMPORTED_MODULE_2__.select(svgRef.current);\n        svg.selectAll(\"*\").remove(); // Clear previous content\n        // Create main group\n        const g = svg.append(\"g\");\n        // Draw static background\n        g.append(\"rect\").attr(\"width\", width).attr(\"height\", height).attr(\"fill\", \"#000\");\n        // Draw static stars (using consistent positions)\n        if (starPositions.length > 0) {\n            starPositions.forEach((star)=>{\n                g.append(\"circle\").attr(\"cx\", star.x).attr(\"cy\", star.y).attr(\"r\", star.r).attr(\"fill\", \"white\").attr(\"opacity\", star.opacity);\n            });\n        }\n        // Draw sun - STATIC\n        g.append(\"circle\").attr(\"cx\", centerX).attr(\"cy\", centerY).attr(\"r\", _data_planets__WEBPACK_IMPORTED_MODULE_3__.SUN_RADIUS).attr(\"fill\", \"#FDB813\").attr(\"stroke\", \"#FFA000\").attr(\"stroke-width\", 2);\n        // Draw orbit paths - STATIC\n        _data_planets__WEBPACK_IMPORTED_MODULE_3__.PLANETS.forEach((planet)=>{\n            const orbitRadius = planet.distanceFromSun * 100; // Scale up for visualization\n            g.append(\"circle\").attr(\"cx\", centerX).attr(\"cy\", centerY).attr(\"r\", orbitRadius).attr(\"fill\", \"none\").attr(\"stroke\", \"rgba(255, 255, 255, 0.2)\").attr(\"stroke-width\", 1);\n        });\n        // Draw planets - STATIC\n        if (planetPositions.size > 0) {\n            _data_planets__WEBPACK_IMPORTED_MODULE_3__.PLANETS.forEach((planet)=>{\n                const position = planetPositions.get(planet.id);\n                if (!position) return;\n                const planetRadius = (0,_lib_orbital_mechanics__WEBPACK_IMPORTED_MODULE_4__.calculatePlanetRadius)(planet);\n                // Planet circle\n                g.append(\"circle\").attr(\"id\", \"planet-\".concat(planet.id)).attr(\"cx\", position.x).attr(\"cy\", position.y).attr(\"r\", planetRadius).attr(\"fill\", planet.color).attr(\"stroke\", (selectedPlanet === null || selectedPlanet === void 0 ? void 0 : selectedPlanet.id) === planet.id ? \"#fff\" : \"none\").attr(\"stroke-width\", (selectedPlanet === null || selectedPlanet === void 0 ? void 0 : selectedPlanet.id) === planet.id ? 2 : 0).style(\"cursor\", \"pointer\").on(\"click\", ()=>onPlanetClick === null || onPlanetClick === void 0 ? void 0 : onPlanetClick(planet));\n                // Planet label\n                g.append(\"text\").attr(\"id\", \"label-\".concat(planet.id)).attr(\"x\", position.x).attr(\"y\", position.y + planetRadius + 15).attr(\"text-anchor\", \"middle\").attr(\"fill\", \"white\").attr(\"font-size\", \"12px\").attr(\"font-weight\", \"500\").text(planet.name);\n            });\n        } else {\n            console.log(\"\\uD83D\\uDD0D DEBUG: Skipping planet drawing - positions not initialized yet\");\n        }\n    }, [\n        width,\n        height,\n        planetPositions,\n        selectedPlanet,\n        onPlanetClick,\n        centerX,\n        centerY\n    ]);\n    // Redraw solar system when planet positions are initialized\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (planetPositions.size > 0 && svgRef.current) {\n            console.log(\"\\uD83D\\uDD0D DEBUG: Planet positions initialized, redrawing solar system\");\n            const svg = d3__WEBPACK_IMPORTED_MODULE_2__.select(svgRef.current);\n            svg.selectAll(\"*\").remove(); // Clear previous content\n            // Recreate the entire solar system\n            const g = svg.append(\"g\");\n            // Draw static background\n            g.append(\"rect\").attr(\"width\", width).attr(\"height\", height).attr(\"fill\", \"#000\");\n            // Draw static stars (using consistent positions)\n            starPositions.forEach((star)=>{\n                g.append(\"circle\").attr(\"cx\", star.x).attr(\"cy\", star.y).attr(\"r\", star.r).attr(\"fill\", \"white\").attr(\"opacity\", star.opacity);\n            });\n            // Draw sun\n            g.append(\"circle\").attr(\"cx\", centerX).attr(\"cy\", centerY).attr(\"r\", _data_planets__WEBPACK_IMPORTED_MODULE_3__.SUN_RADIUS).attr(\"fill\", \"#FDB813\").attr(\"stroke\", \"#FFA000\").attr(\"stroke-width\", 2);\n            // Draw orbit paths\n            _data_planets__WEBPACK_IMPORTED_MODULE_3__.PLANETS.forEach((planet)=>{\n                const orbitRadius = planet.distanceFromSun * 100; // Scale up for visualization\n                g.append(\"circle\").attr(\"cx\", centerX).attr(\"cy\", centerY).attr(\"r\", orbitRadius).attr(\"fill\", \"none\").attr(\"stroke\", \"rgba(255, 255, 255, 0.2)\").attr(\"stroke-width\", 1);\n            });\n            // Draw planets\n            _data_planets__WEBPACK_IMPORTED_MODULE_3__.PLANETS.forEach((planet)=>{\n                const position = planetPositions.get(planet.id);\n                if (!position) return;\n                const planetRadius = (0,_lib_orbital_mechanics__WEBPACK_IMPORTED_MODULE_4__.calculatePlanetRadius)(planet);\n                // Planet circle\n                g.append(\"circle\").attr(\"id\", \"planet-\".concat(planet.id)).attr(\"cx\", position.x).attr(\"cy\", position.y).attr(\"r\", planetRadius).attr(\"fill\", planet.color).attr(\"stroke\", (selectedPlanet === null || selectedPlanet === void 0 ? void 0 : selectedPlanet.id) === planet.id ? \"#fff\" : \"none\").attr(\"stroke-width\", (selectedPlanet === null || selectedPlanet === void 0 ? void 0 : selectedPlanet.id) === planet.id ? 2 : 0).style(\"cursor\", \"pointer\").on(\"click\", ()=>onPlanetClick === null || onPlanetClick === void 0 ? void 0 : onPlanetClick(planet));\n                // Planet label\n                g.append(\"text\").attr(\"id\", \"label-\".concat(planet.id)).attr(\"x\", position.x).attr(\"y\", position.y + planetRadius + 15).attr(\"text-anchor\", \"middle\").attr(\"fill\", \"white\").attr(\"font-size\", \"12px\").attr(\"font-weight\", \"500\").text(planet.name);\n            });\n        }\n    }, [\n        planetPositions,\n        width,\n        height,\n        selectedPlanet,\n        onPlanetClick,\n        centerX,\n        centerY\n    ]);\n    // Update planet positions in D3 SVG when planetPositions changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!svgRef.current) return;\n        console.log(\"\\uD83D\\uDD0D DEBUG: Updating planet positions in SVG\", {\n            planetPositions: planetPositions.size,\n            isPlaying\n        });\n        const svg = d3__WEBPACK_IMPORTED_MODULE_2__.select(svgRef.current);\n        // Update planet positions\n        _data_planets__WEBPACK_IMPORTED_MODULE_3__.PLANETS.forEach((planet)=>{\n            const position = planetPositions.get(planet.id);\n            if (!position) {\n                console.log(\"⚠️ DEBUG: No position found for planet \".concat(planet.name));\n                return;\n            }\n            // Update planet circle position\n            const planetElement = svg.select(\"#planet-\".concat(planet.id));\n            if (planetElement.empty()) {\n                console.log(\"⚠️ DEBUG: Planet element #planet-\".concat(planet.id, \" not found\"));\n            } else {\n                planetElement.attr(\"cx\", position.x).attr(\"cy\", position.y);\n                console.log(\"✅ DEBUG: Updated \".concat(planet.name, \" position to\"), {\n                    x: Math.round(position.x),\n                    y: Math.round(position.y)\n                });\n            }\n            // Update planet label position\n            const planetRadius = (0,_lib_orbital_mechanics__WEBPACK_IMPORTED_MODULE_4__.calculatePlanetRadius)(planet);\n            const labelElement = svg.select(\"#label-\".concat(planet.id));\n            if (labelElement.empty()) {\n                console.log(\"⚠️ DEBUG: Label element #label-\".concat(planet.id, \" not found\"));\n            } else {\n                labelElement.attr(\"x\", position.x).attr(\"y\", position.y + planetRadius + 15);\n            }\n        });\n    }, [\n        planetPositions\n    ]);\n    // DEBUG: Log isPlaying changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"\\uD83D\\uDD0D DEBUG: isPlaying changed\", {\n            isPlaying\n        });\n    }, [\n        isPlaying\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"w-full h-full\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                ref: svgRef,\n                width: width,\n                height: height,\n                className: \"w-full h-full\",\n                style: {\n                    background: \"#000\",\n                    border: \"1px solid #333\"\n                }\n            }, void 0, false, {\n                fileName: \"/Users/hannahnewton/Projects/Sol/src/components/SolarSystemVisualization.tsx\",\n                lineNumber: 378,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"text-white text-sm p-2\",\n                children: [\n                    \"DEBUG: isPlaying = \",\n                    isPlaying ? \"true\" : \"false\"\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/hannahnewton/Projects/Sol/src/components/SolarSystemVisualization.tsx\",\n                lineNumber: 388,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/hannahnewton/Projects/Sol/src/components/SolarSystemVisualization.tsx\",\n        lineNumber: 377,\n        columnNumber: 5\n    }, this);\n}\n_s(SolarSystemVisualization, \"d+d8gIqsZmbl8eS6NafJPqLGDK0=\");\n_c = SolarSystemVisualization;\nvar _c;\n$RefreshReg$(_c, \"SolarSystemVisualization\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL1NvbGFyU3lzdGVtVmlzdWFsaXphdGlvbi50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBRXdFO0FBQy9DO0FBQ29DO0FBQ0c7QUFnQmpELFNBQVNTLHlCQUF5QixLQU9qQjtRQVBpQixFQUMvQ0MsUUFBUSxHQUFHLEVBQ1hDLFNBQVMsR0FBRyxFQUNaQyxZQUFZLEtBQUssRUFDakJDLGtCQUFrQixJQUFJLEVBQ3RCQyxhQUFhLEVBQ2JDLGNBQWMsRUFDZ0IsR0FQaUI7O0lBUS9DLE1BQU1DLFNBQVNkLDZDQUFNQSxDQUFnQjtJQUNyQyxNQUFNZSxlQUFlZiw2Q0FBTUEsQ0FBUztJQUNwQyxNQUFNZ0IsZUFBZWhCLDZDQUFNQSxDQUFTaUIsS0FBS0MsR0FBRztJQUM1QyxNQUFNLENBQUNDLFVBQVVDLFlBQVksR0FBR25CLCtDQUFRQSxDQUFDO0lBQ3pDLE1BQU0sQ0FBQ29CLGlCQUFpQkMsbUJBQW1CLEdBQUdyQiwrQ0FBUUEsQ0FBOEIsSUFBSXNCO0lBQ3hGLE1BQU0sQ0FBQ0MsZUFBZUMsaUJBQWlCLEdBQUd4QiwrQ0FBUUEsQ0FBNEQsRUFBRTtJQUVoSCw2QkFBNkI7SUFDN0IsTUFBTXlCLFVBQVVsQixRQUFRO0lBQ3hCLE1BQU1tQixVQUFVbEIsU0FBUztJQUV6QixvQ0FBb0M7SUFDcENWLGdEQUFTQSxDQUFDO1FBQ1IsTUFBTTZCLGNBQWM7WUFDbEJSLFlBQVlTLE9BQU9DLFVBQVUsR0FBRyxPQUFPLGtCQUFrQkQ7UUFDM0Q7UUFFQUQ7UUFDQUMsT0FBT0UsZ0JBQWdCLENBQUMsVUFBVUg7UUFDbEMsT0FBTyxJQUFNQyxPQUFPRyxtQkFBbUIsQ0FBQyxVQUFVSjtJQUNwRCxHQUFHLEVBQUU7SUFFTCw2REFBNkQ7SUFDN0Q3QixnREFBU0EsQ0FBQztRQUNSLElBQUl5QixjQUFjUyxNQUFNLEtBQUssR0FBRztZQUM5QixNQUFNQyxRQUFRLEVBQUU7WUFDaEIsSUFBSyxJQUFJQyxJQUFJ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akIsSUFBSUMsTUFBTSxDQUFDLFVBQW9CLE9BQVZ6QixPQUFPTyxFQUFFO1lBQ25ELElBQUlrQyxhQUFhRCxLQUFLLElBQUk7Z0JBQ3hCN0MsUUFBUUMsR0FBRyxDQUFDLGtDQUE0QyxPQUFWSSxPQUFPTyxFQUFFLEVBQUM7WUFDMUQsT0FBTztnQkFDTGtDLGFBQ0dYLElBQUksQ0FBQyxLQUFLRSxTQUFTM0MsQ0FBQyxFQUNwQnlDLElBQUksQ0FBQyxLQUFLRSxTQUFTeEMsQ0FBQyxHQUFHMEMsZUFBZTtZQUMzQztRQUNGO0lBQ0YsR0FBRztRQUFDN0Q7S0FBZ0I7SUFFcEIsK0JBQStCO0lBQy9CdEIsZ0RBQVNBLENBQUM7UUFDUjRDLFFBQVFDLEdBQUcsQ0FBQyx5Q0FBK0I7WUFBRWxDO1FBQVU7SUFDekQsR0FBRztRQUFDQTtLQUFVO0lBRWQscUJBQ0UsOERBQUNnRjtRQUFJQyxXQUFVOzswQkFDYiw4REFBQ25CO2dCQUNDb0IsS0FBSzlFO2dCQUNMTixPQUFPQTtnQkFDUEMsUUFBUUE7Z0JBQ1JrRixXQUFVO2dCQUNWUCxPQUFPO29CQUNMUyxZQUFZO29CQUNaQyxRQUFRO2dCQUNWOzs7Ozs7MEJBRUYsOERBQUNKO2dCQUFJQyxXQUFVOztvQkFBeUI7b0JBQ2xCakYsWUFBWSxTQUFTOzs7Ozs7Ozs7Ozs7O0FBSWpEO0dBblh3Qkg7S0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvU29sYXJTeXN0ZW1WaXN1YWxpemF0aW9uLnRzeD85OTgxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcblxuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XG5pbXBvcnQgeyBQbGFuZXQsIFBMQU5FVFMsIFNVTl9SQURJVVMgfSBmcm9tICdAL2RhdGEvcGxhbmV0cyc7XG5pbXBvcnQgeyBjYWxjdWxhdGVQbGFuZXRSYWRpdXMgfSBmcm9tICdAL2xpYi9vcmJpdGFsLW1lY2hhbmljcyc7XG5cbmludGVyZmFjZSBTb2xhclN5c3RlbVZpc3VhbGl6YXRpb25Qcm9wcyB7XG4gIHdpZHRoPzogbnVtYmVyO1xuICBoZWlnaHQ/OiBudW1iZXI7XG4gIGlzUGxheWluZz86IGJvb2xlYW47XG4gIHNwZWVkTXVsdGlwbGllcj86IG51bWJlcjtcbiAgb25QbGFuZXRDbGljaz86IChwbGFuZXQ6IFBsYW5ldCkgPT4gdm9pZDtcbiAgc2VsZWN0ZWRQbGFuZXQ/OiBQbGFuZXQgfCBudWxsO1xufVxuXG5pbnRlcmZhY2UgUGxhbmV0UG9zaXRpb24ge1xuICB4OiBudW1iZXI7XG4gIHk6IG51bWJlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU29sYXJTeXN0ZW1WaXN1YWxpemF0aW9uKHtcbiAgd2lkdGggPSA5MDAsXG4gIGhlaWdodCA9IDcwMCxcbiAgaXNQbGF5aW5nID0gZmFsc2UsXG4gIHNwZWVkTXVsdGlwbGllciA9IDEwMDAsXG4gIG9uUGxhbmV0Q2xpY2ssXG4gIHNlbGVjdGVkUGxhbmV0XG59OiBTb2xhclN5c3RlbVZpc3VhbGl6YXRpb25Qcm9wcykge1xuICBjb25zdCBzdmdSZWYgPSB1c2VSZWY8U1ZHU1ZHRWxlbWVudD4obnVsbCk7XG4gIGNvbnN0IGFuaW1hdGlvblJlZiA9IHVzZVJlZjxudW1iZXI+KDApO1xuICBjb25zdCBzdGFydFRpbWVSZWYgPSB1c2VSZWY8bnVtYmVyPihEYXRlLm5vdygpKTtcbiAgY29uc3QgW2lzTW9iaWxlLCBzZXRJc01vYmlsZV0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtwbGFuZXRQb3NpdGlvbnMsIHNldFBsYW5ldFBvc2l0aW9uc10gPSB1c2VTdGF0ZTxNYXA8c3RyaW5nLCBQbGFuZXRQb3NpdGlvbj4+KG5ldyBNYXAoKSk7XG4gIGNvbnN0IFtzdGFyUG9zaXRpb25zLCBzZXRTdGFyUG9zaXRpb25zXSA9IHVzZVN0YXRlPEFycmF5PHt4OiBudW1iZXIsIHk6IG51bWJlciwgcjogbnVtYmVyLCBvcGFjaXR5OiBudW1iZXJ9Pj4oW10pO1xuICBcbiAgLy8gQ2VudGVyIG9mIHRoZSBzb2xhciBzeXN0ZW1cbiAgY29uc3QgY2VudGVyWCA9IHdpZHRoIC8gMjtcbiAgY29uc3QgY2VudGVyWSA9IGhlaWdodCAvIDI7XG5cbiAgLy8gQ2hlY2sgaWYgd2UncmUgb24gYSBtb2JpbGUgZGV2aWNlXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgY2hlY2tNb2JpbGUgPSAoKSA9PiB7XG4gICAgICBzZXRJc01vYmlsZSh3aW5kb3cuaW5uZXJXaWR0aCA8IDc2OCB8fCAnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cpO1xuICAgIH07XG4gICAgXG4gICAgY2hlY2tNb2JpbGUoKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgY2hlY2tNb2JpbGUpO1xuICAgIHJldHVybiAoKSA9PiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgY2hlY2tNb2JpbGUpO1xuICB9LCBbXSk7XG5cbiAgLy8gSW5pdGlhbGl6ZSBzdGFyIHBvc2l0aW9ucyBvbmNlIChjb25zaXN0ZW50IGFjcm9zcyByZWRyYXdzKVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChzdGFyUG9zaXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29uc3Qgc3RhcnMgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjAwOyBpKyspIHtcbiAgICAgICAgc3RhcnMucHVzaCh7XG4gICAgICAgICAgeDogTWF0aC5yYW5kb20oKSAqIHdpZHRoLFxuICAgICAgICAgIHk6IE1hdGgucmFuZG9tKCkgKiBoZWlnaHQsXG4gICAgICAgICAgcjogTWF0aC5yYW5kb20oKSAqIDEuNSxcbiAgICAgICAgICBvcGFjaXR5OiAwLjMgKyBNYXRoLnJhbmRvbSgpICogMC43XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgc2V0U3RhclBvc2l0aW9ucyhzdGFycyk7XG4gICAgICBjb25zb2xlLmxvZygn4pyoIERFQlVHOiBJbml0aWFsaXplZCBzdGFyIHBvc2l0aW9ucycsIHsgY291bnQ6IHN0YXJzLmxlbmd0aCB9KTtcbiAgICB9XG4gIH0sIFt3aWR0aCwgaGVpZ2h0LCBzdGFyUG9zaXRpb25zLmxlbmd0aF0pO1xuXG4gIC8vIEluaXRpYWxpemUgcGxhbmV0IHBvc2l0aW9uc1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCfwn5SNIERFQlVHOiBJbml0aWFsaXppbmcgcGxhbmV0IHBvc2l0aW9ucycpO1xuICAgIFxuICAgIGNvbnN0IHBvc2l0aW9ucyA9IG5ldyBNYXA8c3RyaW5nLCBQbGFuZXRQb3NpdGlvbj4oKTtcbiAgICBcbiAgICAvLyBTZXQgaW5pdGlhbCBwb3NpdGlvbnMgZm9yIGFsbCBwbGFuZXRzXG4gICAgUExBTkVUUy5mb3JFYWNoKHBsYW5ldCA9PiB7XG4gICAgICBjb25zdCBhbmdsZSA9IDA7IC8vIFN0YXJ0aW5nIGFuZ2xlXG4gICAgICBjb25zdCBvcmJpdFJhZGl1cyA9IHBsYW5ldC5kaXN0YW5jZUZyb21TdW4gKiAxMDA7IC8vIFNjYWxlIHVwIGZvciB2aXN1YWxpemF0aW9uXG4gICAgICBjb25zdCB4ID0gY2VudGVyWCArIG9yYml0UmFkaXVzICogTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgY29uc3QgeSA9IGNlbnRlclkgKyBvcmJpdFJhZGl1cyAqIE1hdGguc2luKGFuZ2xlKTtcbiAgICAgIHBvc2l0aW9ucy5zZXQocGxhbmV0LmlkLCB7IHgsIHkgfSk7XG4gICAgICBcbiAgICAgIGNvbnNvbGUubG9nKGDwn6qQIERFQlVHOiAke3BsYW5ldC5uYW1lfSBpbml0aWFsIHBvc2l0aW9uYCwgeyB4LCB5LCBhbmdsZSwgb3JiaXRSYWRpdXMgfSk7XG4gICAgfSk7XG4gICAgXG4gICAgc2V0UGxhbmV0UG9zaXRpb25zKHBvc2l0aW9ucyk7XG4gIH0sIFtjZW50ZXJYLCBjZW50ZXJZXSk7XG5cbiAgLy8gQW5pbWF0aW9uIGxvb3AgLSBPTkxZIHdoZW4gaXNQbGF5aW5nIGlzIHRydWVcbiAgY29uc3QgYW5pbWF0ZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAoIWlzUGxheWluZykge1xuICAgICAgY29uc29sZS5sb2coJ/Cfm5EgREVCVUc6IEFuaW1hdGlvbiBzdG9wcGVkIC0gaXNQbGF5aW5nIGlzIGZhbHNlJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCBlbGFwc2VkID0gKG5vdyAtIHN0YXJ0VGltZVJlZi5jdXJyZW50KSAvIDEwMDA7IC8vIENvbnZlcnQgdG8gc2Vjb25kc1xuICAgIGNvbnN0IHNjYWxlZEVsYXBzZWQgPSBlbGFwc2VkICogKHNwZWVkTXVsdGlwbGllciAvIDEwMDApO1xuXG4gICAgY29uc29sZS5sb2coJ/CflIQgREVCVUc6IEFuaW1hdGlvbiBmcmFtZScsIHsgXG4gICAgICBlbGFwc2VkLCBcbiAgICAgIHNjYWxlZEVsYXBzZWQsIFxuICAgICAgaXNQbGF5aW5nLFxuICAgICAgcGxhbmV0Q291bnQ6IHBsYW5ldFBvc2l0aW9ucy5zaXplIFxuICAgIH0pO1xuXG4gICAgY29uc3QgbmV3UG9zaXRpb25zID0gbmV3IE1hcDxzdHJpbmcsIFBsYW5ldFBvc2l0aW9uPigpO1xuICAgIFxuICAgIC8vIFZpc3VhbCBzY2FsaW5nIGZhY3RvciBmb3Igb3JiaXRhbCBwZXJpb2RzIChtYWtlcyBwbGFuZXRzIG1vdmUgZmFzdGVyIGZvciBiZXR0ZXIgdmlzdWFsaXphdGlvbilcbiAgICBjb25zdCBWSVNVQUxfT1JCSVRBTF9TQ0FMRSA9IDAuMDE7IC8vIFNjYWxlIGRvd24gb3JiaXRhbCBwZXJpb2RzIGJ5IDk5JVxuICAgIFxuICAgIFBMQU5FVFMuZm9yRWFjaChwbGFuZXQgPT4ge1xuICAgICAgY29uc3QgdmlzdWFsT3JiaXRhbFBlcmlvZCA9IHBsYW5ldC5vcmJpdGFsUGVyaW9kICogVklTVUFMX09SQklUQUxfU0NBTEU7XG4gICAgICBjb25zdCBhbmdsZSA9IChzY2FsZWRFbGFwc2VkIC8gdmlzdWFsT3JiaXRhbFBlcmlvZCkgKiAyICogTWF0aC5QSTtcbiAgICAgIGNvbnN0IG9yYml0UmFkaXVzID0gcGxhbmV0LmRpc3RhbmNlRnJvbVN1biAqIDEwMDsgLy8gU2NhbGUgdXAgZm9yIHZpc3VhbGl6YXRpb25cbiAgICAgIGNvbnN0IHggPSBjZW50ZXJYICsgb3JiaXRSYWRpdXMgKiBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICBjb25zdCB5ID0gY2VudGVyWSArIG9yYml0UmFkaXVzICogTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgbmV3UG9zaXRpb25zLnNldChwbGFuZXQuaWQsIHsgeCwgeSB9KTtcbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coYPCfqpAgREVCVUc6ICR7cGxhbmV0Lm5hbWV9IHBvc2l0aW9uYCwgeyBcbiAgICAgICAgaWQ6IHBsYW5ldC5pZCwgXG4gICAgICAgIG9yYml0YWxQZXJpb2Q6IHBsYW5ldC5vcmJpdGFsUGVyaW9kLFxuICAgICAgICB2aXN1YWxPcmJpdGFsUGVyaW9kOiB2aXN1YWxPcmJpdGFsUGVyaW9kLFxuICAgICAgICBhbmdsZTogYW5nbGUudG9GaXhlZCgzKSwgXG4gICAgICAgIHg6IE1hdGgucm91bmQoeCksIFxuICAgICAgICB5OiBNYXRoLnJvdW5kKHkpIFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXRQbGFuZXRQb3NpdGlvbnMobmV3UG9zaXRpb25zKTtcbiAgICBcbiAgICAvLyBDb250aW51ZSBhbmltYXRpb24gbG9vcFxuICAgIGFuaW1hdGlvblJlZi5jdXJyZW50ID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUpO1xuICB9LCBbaXNQbGF5aW5nLCBzcGVlZE11bHRpcGxpZXIsIGNlbnRlclgsIGNlbnRlclldKTtcblxuICAvLyBTdGFydC9zdG9wIGFuaW1hdGlvbiBiYXNlZCBvbiBpc1BsYXlpbmdcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zb2xlLmxvZygn8J+UjSBERUJVRzogQW5pbWF0aW9uIGNvbnRyb2wgZWZmZWN0JywgeyBpc1BsYXlpbmcgfSk7XG4gICAgXG4gICAgaWYgKGlzUGxheWluZykge1xuICAgICAgc3RhcnRUaW1lUmVmLmN1cnJlbnQgPSBEYXRlLm5vdygpOyAvLyBSZXNldCBzdGFydCB0aW1lXG4gICAgICBhbmltYXRpb25SZWYuY3VycmVudCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGFuaW1hdGlvblJlZi5jdXJyZW50KSB7XG4gICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGFuaW1hdGlvblJlZi5jdXJyZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKGFuaW1hdGlvblJlZi5jdXJyZW50KSB7XG4gICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGFuaW1hdGlvblJlZi5jdXJyZW50KTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbaXNQbGF5aW5nLCBhbmltYXRlXSk7XG5cbiAgLy8gUmVuZGVyIHRoZSBzb2xhciBzeXN0ZW0gLSBDT01QTEVURUxZIFNUQVRJQ1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghc3ZnUmVmLmN1cnJlbnQpIHJldHVybjtcblxuICAgIGNvbnNvbGUubG9nKCfwn5SNIERFQlVHOiBSZW5kZXJpbmcgc29sYXIgc3lzdGVtJywgeyBpc1BsYXlpbmcgfSk7XG5cbiAgICBjb25zdCBzdmcgPSBkMy5zZWxlY3Qoc3ZnUmVmLmN1cnJlbnQpO1xuICAgIHN2Zy5zZWxlY3RBbGwoJyonKS5yZW1vdmUoKTsgLy8gQ2xlYXIgcHJldmlvdXMgY29udGVudFxuXG4gICAgLy8gQ3JlYXRlIG1haW4gZ3JvdXBcbiAgICBjb25zdCBnID0gc3ZnLmFwcGVuZCgnZycpO1xuXG4gICAgLy8gRHJhdyBzdGF0aWMgYmFja2dyb3VuZFxuICAgIGcuYXBwZW5kKCdyZWN0JylcbiAgICAgIC5hdHRyKCd3aWR0aCcsIHdpZHRoKVxuICAgICAgLmF0dHIoJ2hlaWdodCcsIGhlaWdodClcbiAgICAgIC5hdHRyKCdmaWxsJywgJyMwMDAnKTtcblxuICAgIC8vIERyYXcgc3RhdGljIHN0YXJzICh1c2luZyBjb25zaXN0ZW50IHBvc2l0aW9ucylcbiAgICBpZiAoc3RhclBvc2l0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICBzdGFyUG9zaXRpb25zLmZvckVhY2goc3RhciA9PiB7XG4gICAgICAgIGcuYXBwZW5kKCdjaXJjbGUnKVxuICAgICAgICAgIC5hdHRyKCdjeCcsIHN0YXIueClcbiAgICAgICAgICAuYXR0cignY3knLCBzdGFyLnkpXG4gICAgICAgICAgLmF0dHIoJ3InLCBzdGFyLnIpXG4gICAgICAgICAgLmF0dHIoJ2ZpbGwnLCAnd2hpdGUnKVxuICAgICAgICAgIC5hdHRyKCdvcGFjaXR5Jywgc3Rhci5vcGFjaXR5KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIERyYXcgc3VuIC0gU1RBVElDXG4gICAgZy5hcHBlbmQoJ2NpcmNsZScpXG4gICAgICAuYXR0cignY3gnLCBjZW50ZXJYKVxuICAgICAgLmF0dHIoJ2N5JywgY2VudGVyWSlcbiAgICAgIC5hdHRyKCdyJywgU1VOX1JBRElVUylcbiAgICAgIC5hdHRyKCdmaWxsJywgJyNGREI4MTMnKVxuICAgICAgLmF0dHIoJ3N0cm9rZScsICcjRkZBMDAwJylcbiAgICAgIC5hdHRyKCdzdHJva2Utd2lkdGgnLCAyKTtcblxuICAgIC8vIERyYXcgb3JiaXQgcGF0aHMgLSBTVEFUSUNcbiAgICBQTEFORVRTLmZvckVhY2gocGxhbmV0ID0+IHtcbiAgICAgIGNvbnN0IG9yYml0UmFkaXVzID0gcGxhbmV0LmRpc3RhbmNlRnJvbVN1biAqIDEwMDsgLy8gU2NhbGUgdXAgZm9yIHZpc3VhbGl6YXRpb25cbiAgICAgIGcuYXBwZW5kKCdjaXJjbGUnKVxuICAgICAgICAuYXR0cignY3gnLCBjZW50ZXJYKVxuICAgICAgICAuYXR0cignY3knLCBjZW50ZXJZKVxuICAgICAgICAuYXR0cigncicsIG9yYml0UmFkaXVzKVxuICAgICAgICAuYXR0cignZmlsbCcsICdub25lJylcbiAgICAgICAgLmF0dHIoJ3N0cm9rZScsICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiknKVxuICAgICAgICAuYXR0cignc3Ryb2tlLXdpZHRoJywgMSk7XG4gICAgfSk7XG5cbiAgICAvLyBEcmF3IHBsYW5ldHMgLSBTVEFUSUNcbiAgICBpZiAocGxhbmV0UG9zaXRpb25zLnNpemUgPiAwKSB7XG4gICAgICBQTEFORVRTLmZvckVhY2gocGxhbmV0ID0+IHtcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBwbGFuZXRQb3NpdGlvbnMuZ2V0KHBsYW5ldC5pZCk7XG4gICAgICAgIGlmICghcG9zaXRpb24pIHJldHVybjtcblxuICAgICAgICBjb25zdCBwbGFuZXRSYWRpdXMgPSBjYWxjdWxhdGVQbGFuZXRSYWRpdXMocGxhbmV0KTtcbiAgICAgICAgXG4gICAgICAgIC8vIFBsYW5ldCBjaXJjbGVcbiAgICAgICAgZy5hcHBlbmQoJ2NpcmNsZScpXG4gICAgICAgICAgLmF0dHIoJ2lkJywgYHBsYW5ldC0ke3BsYW5ldC5pZH1gKVxuICAgICAgICAgIC5hdHRyKCdjeCcsIHBvc2l0aW9uLngpXG4gICAgICAgICAgLmF0dHIoJ2N5JywgcG9zaXRpb24ueSlcbiAgICAgICAgICAuYXR0cigncicsIHBsYW5ldFJhZGl1cylcbiAgICAgICAgICAuYXR0cignZmlsbCcsIHBsYW5ldC5jb2xvcilcbiAgICAgICAgICAuYXR0cignc3Ryb2tlJywgc2VsZWN0ZWRQbGFuZXQ/LmlkID09PSBwbGFuZXQuaWQgPyAnI2ZmZicgOiAnbm9uZScpXG4gICAgICAgICAgLmF0dHIoJ3N0cm9rZS13aWR0aCcsIHNlbGVjdGVkUGxhbmV0Py5pZCA9PT0gcGxhbmV0LmlkID8gMiA6IDApXG4gICAgICAgICAgLnN0eWxlKCdjdXJzb3InLCAncG9pbnRlcicpXG4gICAgICAgICAgLm9uKCdjbGljaycsICgpID0+IG9uUGxhbmV0Q2xpY2s/LihwbGFuZXQpKTtcblxuICAgICAgICAvLyBQbGFuZXQgbGFiZWxcbiAgICAgICAgZy5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAgIC5hdHRyKCdpZCcsIGBsYWJlbC0ke3BsYW5ldC5pZH1gKVxuICAgICAgICAgIC5hdHRyKCd4JywgcG9zaXRpb24ueClcbiAgICAgICAgICAuYXR0cigneScsIHBvc2l0aW9uLnkgKyBwbGFuZXRSYWRpdXMgKyAxNSlcbiAgICAgICAgICAuYXR0cigndGV4dC1hbmNob3InLCAnbWlkZGxlJylcbiAgICAgICAgICAuYXR0cignZmlsbCcsICd3aGl0ZScpXG4gICAgICAgICAgLmF0dHIoJ2ZvbnQtc2l6ZScsICcxMnB4JylcbiAgICAgICAgICAuYXR0cignZm9udC13ZWlnaHQnLCAnNTAwJylcbiAgICAgICAgICAudGV4dChwbGFuZXQubmFtZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coJ/CflI0gREVCVUc6IFNraXBwaW5nIHBsYW5ldCBkcmF3aW5nIC0gcG9zaXRpb25zIG5vdCBpbml0aWFsaXplZCB5ZXQnKTtcbiAgICB9XG5cbiAgfSwgW3dpZHRoLCBoZWlnaHQsIHBsYW5ldFBvc2l0aW9ucywgc2VsZWN0ZWRQbGFuZXQsIG9uUGxhbmV0Q2xpY2ssIGNlbnRlclgsIGNlbnRlclldKTtcblxuICAvLyBSZWRyYXcgc29sYXIgc3lzdGVtIHdoZW4gcGxhbmV0IHBvc2l0aW9ucyBhcmUgaW5pdGlhbGl6ZWRcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocGxhbmV0UG9zaXRpb25zLnNpemUgPiAwICYmIHN2Z1JlZi5jdXJyZW50KSB7XG4gICAgICBjb25zb2xlLmxvZygn8J+UjSBERUJVRzogUGxhbmV0IHBvc2l0aW9ucyBpbml0aWFsaXplZCwgcmVkcmF3aW5nIHNvbGFyIHN5c3RlbScpO1xuICAgICAgXG4gICAgICBjb25zdCBzdmcgPSBkMy5zZWxlY3Qoc3ZnUmVmLmN1cnJlbnQpO1xuICAgICAgc3ZnLnNlbGVjdEFsbCgnKicpLnJlbW92ZSgpOyAvLyBDbGVhciBwcmV2aW91cyBjb250ZW50XG4gICAgICBcbiAgICAgIC8vIFJlY3JlYXRlIHRoZSBlbnRpcmUgc29sYXIgc3lzdGVtXG4gICAgICBjb25zdCBnID0gc3ZnLmFwcGVuZCgnZycpO1xuICAgICAgXG4gICAgICAvLyBEcmF3IHN0YXRpYyBiYWNrZ3JvdW5kXG4gICAgICBnLmFwcGVuZCgncmVjdCcpXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIHdpZHRoKVxuICAgICAgICAuYXR0cignaGVpZ2h0JywgaGVpZ2h0KVxuICAgICAgICAuYXR0cignZmlsbCcsICcjMDAwJyk7XG4gICAgICAgIFxuICAgICAgLy8gRHJhdyBzdGF0aWMgc3RhcnMgKHVzaW5nIGNvbnNpc3RlbnQgcG9zaXRpb25zKVxuICAgICAgc3RhclBvc2l0aW9ucy5mb3JFYWNoKHN0YXIgPT4ge1xuICAgICAgICBnLmFwcGVuZCgnY2lyY2xlJylcbiAgICAgICAgICAuYXR0cignY3gnLCBzdGFyLngpXG4gICAgICAgICAgLmF0dHIoJ2N5Jywgc3Rhci55KVxuICAgICAgICAgIC5hdHRyKCdyJywgc3Rhci5yKVxuICAgICAgICAgIC5hdHRyKCdmaWxsJywgJ3doaXRlJylcbiAgICAgICAgICAuYXR0cignb3BhY2l0eScsIHN0YXIub3BhY2l0eSk7XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gRHJhdyBzdW5cbiAgICAgIGcuYXBwZW5kKCdjaXJjbGUnKVxuICAgICAgICAuYXR0cignY3gnLCBjZW50ZXJYKVxuICAgICAgICAuYXR0cignY3knLCBjZW50ZXJZKVxuICAgICAgICAuYXR0cigncicsIFNVTl9SQURJVVMpXG4gICAgICAgIC5hdHRyKCdmaWxsJywgJyNGREI4MTMnKVxuICAgICAgICAuYXR0cignc3Ryb2tlJywgJyNGRkEwMDAnKVxuICAgICAgICAuYXR0cignc3Ryb2tlLXdpZHRoJywgMik7XG4gICAgICAgIFxuICAgICAgLy8gRHJhdyBvcmJpdCBwYXRoc1xuICAgICAgUExBTkVUUy5mb3JFYWNoKHBsYW5ldCA9PiB7XG4gICAgICAgIGNvbnN0IG9yYml0UmFkaXVzID0gcGxhbmV0LmRpc3RhbmNlRnJvbVN1biAqIDEwMDsgLy8gU2NhbGUgdXAgZm9yIHZpc3VhbGl6YXRpb25cbiAgICAgICAgZy5hcHBlbmQoJ2NpcmNsZScpXG4gICAgICAgICAgLmF0dHIoJ2N4JywgY2VudGVyWClcbiAgICAgICAgICAuYXR0cignY3knLCBjZW50ZXJZKVxuICAgICAgICAgIC5hdHRyKCdyJywgb3JiaXRSYWRpdXMpXG4gICAgICAgICAgLmF0dHIoJ2ZpbGwnLCAnbm9uZScpXG4gICAgICAgICAgLmF0dHIoJ3N0cm9rZScsICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiknKVxuICAgICAgICAgIC5hdHRyKCdzdHJva2Utd2lkdGgnLCAxKTtcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICAvLyBEcmF3IHBsYW5ldHNcbiAgICAgIFBMQU5FVFMuZm9yRWFjaChwbGFuZXQgPT4ge1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHBsYW5ldFBvc2l0aW9ucy5nZXQocGxhbmV0LmlkKTtcbiAgICAgICAgaWYgKCFwb3NpdGlvbikgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IHBsYW5ldFJhZGl1cyA9IGNhbGN1bGF0ZVBsYW5ldFJhZGl1cyhwbGFuZXQpO1xuICAgICAgICBcbiAgICAgICAgLy8gUGxhbmV0IGNpcmNsZVxuICAgICAgICBnLmFwcGVuZCgnY2lyY2xlJylcbiAgICAgICAgICAuYXR0cignaWQnLCBgcGxhbmV0LSR7cGxhbmV0LmlkfWApXG4gICAgICAgICAgLmF0dHIoJ2N4JywgcG9zaXRpb24ueClcbiAgICAgICAgICAuYXR0cignY3knLCBwb3NpdGlvbi55KVxuICAgICAgICAgIC5hdHRyKCdyJywgcGxhbmV0UmFkaXVzKVxuICAgICAgICAgIC5hdHRyKCdmaWxsJywgcGxhbmV0LmNvbG9yKVxuICAgICAgICAgIC5hdHRyKCdzdHJva2UnLCBzZWxlY3RlZFBsYW5ldD8uaWQgPT09IHBsYW5ldC5pZCA/ICcjZmZmJyA6ICdub25lJylcbiAgICAgICAgICAuYXR0cignc3Ryb2tlLXdpZHRoJywgc2VsZWN0ZWRQbGFuZXQ/LmlkID09PSBwbGFuZXQuaWQgPyAyIDogMClcbiAgICAgICAgICAuc3R5bGUoJ2N1cnNvcicsICdwb2ludGVyJylcbiAgICAgICAgICAub24oJ2NsaWNrJywgKCkgPT4gb25QbGFuZXRDbGljaz8uKHBsYW5ldCkpO1xuXG4gICAgICAgIC8vIFBsYW5ldCBsYWJlbFxuICAgICAgICBnLmFwcGVuZCgndGV4dCcpXG4gICAgICAgICAgLmF0dHIoJ2lkJywgYGxhYmVsLSR7cGxhbmV0LmlkfWApXG4gICAgICAgICAgLmF0dHIoJ3gnLCBwb3NpdGlvbi54KVxuICAgICAgICAgIC5hdHRyKCd5JywgcG9zaXRpb24ueSArIHBsYW5ldFJhZGl1cyArIDE1KVxuICAgICAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKVxuICAgICAgICAgIC5hdHRyKCdmaWxsJywgJ3doaXRlJylcbiAgICAgICAgICAuYXR0cignZm9udC1zaXplJywgJzEycHgnKVxuICAgICAgICAgIC5hdHRyKCdmb250LXdlaWdodCcsICc1MDAnKVxuICAgICAgICAgIC50ZXh0KHBsYW5ldC5uYW1lKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW3BsYW5ldFBvc2l0aW9ucywgd2lkdGgsIGhlaWdodCwgc2VsZWN0ZWRQbGFuZXQsIG9uUGxhbmV0Q2xpY2ssIGNlbnRlclgsIGNlbnRlclldKTtcblxuICAvLyBVcGRhdGUgcGxhbmV0IHBvc2l0aW9ucyBpbiBEMyBTVkcgd2hlbiBwbGFuZXRQb3NpdGlvbnMgY2hhbmdlc1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghc3ZnUmVmLmN1cnJlbnQpIHJldHVybjtcblxuICAgIGNvbnNvbGUubG9nKCfwn5SNIERFQlVHOiBVcGRhdGluZyBwbGFuZXQgcG9zaXRpb25zIGluIFNWRycsIHsgXG4gICAgICBwbGFuZXRQb3NpdGlvbnM6IHBsYW5ldFBvc2l0aW9ucy5zaXplLFxuICAgICAgaXNQbGF5aW5nXG4gICAgfSk7XG5cbiAgICBjb25zdCBzdmcgPSBkMy5zZWxlY3Qoc3ZnUmVmLmN1cnJlbnQpO1xuXG4gICAgLy8gVXBkYXRlIHBsYW5ldCBwb3NpdGlvbnNcbiAgICBQTEFORVRTLmZvckVhY2gocGxhbmV0ID0+IHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gcGxhbmV0UG9zaXRpb25zLmdldChwbGFuZXQuaWQpO1xuICAgICAgaWYgKCFwb3NpdGlvbikge1xuICAgICAgICBjb25zb2xlLmxvZyhg4pqg77iPIERFQlVHOiBObyBwb3NpdGlvbiBmb3VuZCBmb3IgcGxhbmV0ICR7cGxhbmV0Lm5hbWV9YCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVXBkYXRlIHBsYW5ldCBjaXJjbGUgcG9zaXRpb25cbiAgICAgIGNvbnN0IHBsYW5ldEVsZW1lbnQgPSBzdmcuc2VsZWN0KGAjcGxhbmV0LSR7cGxhbmV0LmlkfWApO1xuICAgICAgaWYgKHBsYW5ldEVsZW1lbnQuZW1wdHkoKSkge1xuICAgICAgICBjb25zb2xlLmxvZyhg4pqg77iPIERFQlVHOiBQbGFuZXQgZWxlbWVudCAjcGxhbmV0LSR7cGxhbmV0LmlkfSBub3QgZm91bmRgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBsYW5ldEVsZW1lbnRcbiAgICAgICAgICAuYXR0cignY3gnLCBwb3NpdGlvbi54KVxuICAgICAgICAgIC5hdHRyKCdjeScsIHBvc2l0aW9uLnkpO1xuICAgICAgICBjb25zb2xlLmxvZyhg4pyFIERFQlVHOiBVcGRhdGVkICR7cGxhbmV0Lm5hbWV9IHBvc2l0aW9uIHRvYCwgeyBcbiAgICAgICAgICB4OiBNYXRoLnJvdW5kKHBvc2l0aW9uLngpLCBcbiAgICAgICAgICB5OiBNYXRoLnJvdW5kKHBvc2l0aW9uLnkpIFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gVXBkYXRlIHBsYW5ldCBsYWJlbCBwb3NpdGlvblxuICAgICAgY29uc3QgcGxhbmV0UmFkaXVzID0gY2FsY3VsYXRlUGxhbmV0UmFkaXVzKHBsYW5ldCk7XG4gICAgICBjb25zdCBsYWJlbEVsZW1lbnQgPSBzdmcuc2VsZWN0KGAjbGFiZWwtJHtwbGFuZXQuaWR9YCk7XG4gICAgICBpZiAobGFiZWxFbGVtZW50LmVtcHR5KCkpIHtcbiAgICAgICAgY29uc29sZS5sb2coYOKaoO+4jyBERUJVRzogTGFiZWwgZWxlbWVudCAjbGFiZWwtJHtwbGFuZXQuaWR9IG5vdCBmb3VuZGApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGFiZWxFbGVtZW50XG4gICAgICAgICAgLmF0dHIoJ3gnLCBwb3NpdGlvbi54KVxuICAgICAgICAgIC5hdHRyKCd5JywgcG9zaXRpb24ueSArIHBsYW5ldFJhZGl1cyArIDE1KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSwgW3BsYW5ldFBvc2l0aW9uc10pO1xuXG4gIC8vIERFQlVHOiBMb2cgaXNQbGF5aW5nIGNoYW5nZXNcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zb2xlLmxvZygn8J+UjSBERUJVRzogaXNQbGF5aW5nIGNoYW5nZWQnLCB7IGlzUGxheWluZyB9KTtcbiAgfSwgW2lzUGxheWluZ10pO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJ3LWZ1bGwgaC1mdWxsXCI+XG4gICAgICA8c3ZnXG4gICAgICAgIHJlZj17c3ZnUmVmfVxuICAgICAgICB3aWR0aD17d2lkdGh9XG4gICAgICAgIGhlaWdodD17aGVpZ2h0fVxuICAgICAgICBjbGFzc05hbWU9XCJ3LWZ1bGwgaC1mdWxsXCJcbiAgICAgICAgc3R5bGU9e3sgXG4gICAgICAgICAgYmFja2dyb3VuZDogJyMwMDAnLFxuICAgICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCAjMzMzJ1xuICAgICAgICB9fVxuICAgICAgLz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC13aGl0ZSB0ZXh0LXNtIHAtMlwiPlxuICAgICAgICBERUJVRzogaXNQbGF5aW5nID0ge2lzUGxheWluZyA/ICd0cnVlJyA6ICdmYWxzZSd9XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZUVmZmVjdCIsInVzZVJlZiIsInVzZVN0YXRlIiwidXNlQ2FsbGJhY2siLCJkMyIsIlBMQU5FVFMiLCJTVU5fUkFESVVTIiwiY2FsY3VsYXRlUGxhbmV0UmFkaXVzIiwiU29sYXJTeXN0ZW1WaXN1YWxpemF0aW9uIiwid2lkdGgiLCJoZWlnaHQiLCJpc1BsYXlpbmciLCJzcGVlZE11bHRpcGxpZXIiLCJvblBsYW5ldENsaWNrIiwic2VsZWN0ZWRQbGFuZXQiLCJzdmdSZWYiLCJhbmltYXRpb25SZWYiLCJzdGFydFRpbWVSZWYiLCJEYXRlIiwibm93IiwiaXNNb2JpbGUiLCJzZXRJc01vYmlsZSIsInBsYW5ldFBvc2l0aW9ucyIsInNldFBsYW5ldFBvc2l0aW9ucyIsIk1hcCIsInN0YXJQb3NpdGlvbnMiLCJzZXRTdGFyUG9zaXRpb25zIiwiY2VudGVyWCIsImNlbnRlclkiLCJjaGVja01vYmlsZSIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImxlbmd0aCIsInN0YXJzIiwiaSIsInB1c2giLCJ4IiwiTWF0aCIsInJhbmRvbSIsInkiLCJyIiwib3BhY2l0eSIsImNvbnNvbGUiLCJsb2ciLCJjb3VudCIsInBvc2l0aW9ucyIsImZvckVhY2giLCJwbGFuZXQiLCJhbmdsZSIsIm9yYml0UmFkaXVzIiwiZGlzdGFuY2VGcm9tU3VuIiwiY29zIiwic2luIiwic2V0IiwiaWQiLCJuYW1lIiwiYW5pbWF0ZSIsImVsYXBzZWQiLCJjdXJyZW50Iiwic2NhbGVkRWxhcHNlZCIsInBsYW5ldENvdW50Iiwic2l6ZSIsIm5ld1Bvc2l0aW9ucyIsIlZJU1VBTF9PUkJJVEFMX1NDQUxFIiwidmlzdWFsT3JiaXRhbFBlcmlvZCIsIm9yYml0YWxQZXJpb2QiLCJQSSIsInRvRml4ZWQiLCJyb3VuZCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwic3ZnIiwic2VsZWN0Iiwic2VsZWN0QWxsIiwicmVtb3ZlIiwiZyIsImFwcGVuZCIsImF0dHIiLCJzdGFyIiwicG9zaXRpb24iLCJnZXQiLCJwbGFuZXRSYWRpdXMiLCJjb2xvciIsInN0eWxlIiwib24iLCJ0ZXh0IiwicGxhbmV0RWxlbWVudCIsImVtcHR5IiwibGFiZWxFbGVtZW50IiwiZGl2IiwiY2xhc3NOYW1lIiwicmVmIiwiYmFja2dyb3VuZCIsImJvcmRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/SolarSystemVisualization.tsx\n"));

/***/ })

});