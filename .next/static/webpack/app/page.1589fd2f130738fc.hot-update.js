"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/audioEngine.ts":
/*!********************************!*\
  !*** ./src/lib/audioEngine.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CelestialAudioEngine: function() { return /* binding */ CelestialAudioEngine; },\n/* harmony export */   getAudioEngine: function() { return /* binding */ getAudioEngine; },\n/* harmony export */   resetAudioEngine: function() { return /* binding */ resetAudioEngine; }\n/* harmony export */ });\n/* harmony import */ var _orbital_mechanics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./orbital-mechanics */ \"(app-pages-browser)/./src/lib/orbital-mechanics.ts\");\n/* harmony import */ var _data_planets__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/data/planets */ \"(app-pages-browser)/./src/data/planets.ts\");\n\n\n// Tone.js will be imported dynamically\nlet Tone;\nclass CelestialAudioEngine {\n    /**\n   * Set the Tone.js reference from external source\n   */ setToneReference(toneRef) {\n        Tone = toneRef;\n        console.log(\"\\uD83D\\uDD0D Tone.js reference set from external source\");\n        if (Tone.version) {\n            console.log(\"\\uD83D\\uDD0D Tone.js version:\", Tone.version);\n        }\n    }\n    async initialize() {\n        if (this.isInitialized) return;\n        try {\n            console.log(\"Initializing Celestial Audio Engine with Tone.js...\");\n            // Use Tone.js reference if already set, otherwise import it\n            if (!Tone) {\n                console.log(\"\\uD83D\\uDD0D Loading Tone.js...\");\n                // Try different Tone.js import approaches\n                console.log(\"\\uD83D\\uDD0D Attempting Tone.js import...\");\n                // Method 1: Simple Tone.js v14 import\n                try {\n                    console.log(\"\\uD83D\\uDD0D Attempting simple Tone.js v14 import...\");\n                    // Try to import Tone.js with error handling for chunk loading\n                    let toneModule;\n                    try {\n                        toneModule = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_tone_build_Tone_js\").then(__webpack_require__.bind(__webpack_require__, /*! tone */ \"(app-pages-browser)/./node_modules/tone/build/Tone.js\"));\n                        console.log(\"\\uD83D\\uDD0D Tone.js module imported\");\n                        console.log(\"\\uD83D\\uDD0D Module keys:\", Object.keys(toneModule));\n                    } catch (importError) {\n                        console.error(\"❌ Tone.js chunk import failed:\", importError);\n                        // Try alternative import method\n                        console.log(\"\\uD83D\\uDD0D Trying alternative Tone.js import...\");\n                        toneModule = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_tone_build_Tone_js\").then(__webpack_require__.bind(__webpack_require__, /*! tone/build/Tone */ \"(app-pages-browser)/./node_modules/tone/build/Tone.js\"));\n                        console.log(\"\\uD83D\\uDD0D Tone.js imported via build path\");\n                    }\n                    // Try to use the module directly\n                    Tone = toneModule;\n                    // Check if we have basic functionality\n                    console.log(\"\\uD83D\\uDD0D Checking basic functionality...\");\n                    console.log(\"\\uD83D\\uDD0D Tone.start type:\", typeof Tone.start);\n                    console.log(\"\\uD83D\\uDD0D Tone.Transport type:\", typeof Tone.Transport);\n                    // Try to start Tone.js context first\n                    if (typeof Tone.start === \"function\") {\n                        console.log(\"\\uD83D\\uDD0D Starting Tone.js context...\");\n                        await Tone.start();\n                        console.log(\"✅ Tone.js context started successfully\");\n                    } else {\n                        console.log(\"❌ Tone.start is not a function\");\n                    }\n                    console.log(\"\\uD83D\\uDD0D Tone.js imported successfully\");\n                    if (Tone.version) {\n                        console.log(\"\\uD83D\\uDD0D Tone.js version:\", Tone.version);\n                    } else {\n                        console.log(\"\\uD83D\\uDD0D Tone.js version: not available\");\n                    }\n                    // Debug the complete Tone.js structure\n                    console.log(\"\\uD83D\\uDD0D Complete Tone.js structure:\");\n                    Object.keys(Tone).forEach((key)=>{\n                        console.log(\"  - \".concat(key, \": \").concat(typeof Tone[key]));\n                        if (typeof Tone[key] === \"object\" && Tone[key] !== null) {\n                            console.log(\"    Properties: \".concat(Object.keys(Tone[key])));\n                        }\n                    });\n                    // Check for common Tone.js v14 patterns\n                    console.log(\"\\uD83D\\uDD0D Checking for Tone.js v14 patterns...\");\n                    // Check if there's a default export\n                    if (Tone.default) {\n                        console.log(\"\\uD83D\\uDD0D Found default export:\", typeof Tone.default);\n                        console.log(\"\\uD83D\\uDD0D Default export keys:\", Object.keys(Tone.default));\n                    }\n                    // Check if there are sub-modules\n                    if (Tone.Component) {\n                        console.log(\"\\uD83D\\uDD0D Found Component module:\", Object.keys(Tone.Component));\n                    }\n                    if (Tone.Effect) {\n                        console.log(\"\\uD83D\\uDD0D Found Effect module:\", Object.keys(Tone.Effect));\n                    }\n                    if (Tone.Instrument) {\n                        console.log(\"\\uD83D\\uDD0D Found Instrument module:\", Object.keys(Tone.Instrument));\n                    }\n                    if (Tone.Signal) {\n                        console.log(\"\\uD83D\\uDD0D Found Signal module:\", Object.keys(Tone.Signal));\n                    }\n                    // Try to find Volume in different locations\n                    const volumeLocations = [\n                        \"Volume\",\n                        \"Component.Volume\",\n                        \"Effect.Volume\",\n                        \"Signal.Volume\",\n                        \"default.Volume\",\n                        \"default.Component.Volume\",\n                        \"default.Effect.Volume\"\n                    ];\n                    volumeLocations.forEach((location)=>{\n                        try {\n                            const parts = location.split(\".\");\n                            let obj = Tone;\n                            for (const part of parts){\n                                if (obj && obj[part]) {\n                                    obj = obj[part];\n                                } else {\n                                    obj = null;\n                                    break;\n                                }\n                            }\n                            if (obj && typeof obj === \"function\") {\n                                console.log(\"✅ Found Volume constructor at: Tone.\".concat(location));\n                                this.VolumeConstructor = obj;\n                            } else if (obj && typeof obj === \"object\") {\n                                console.log(\"\\uD83D\\uDD0D Found Volume object at: Tone.\".concat(location), Object.keys(obj));\n                            }\n                        } catch (e) {\n                        // Ignore errors\n                        }\n                    });\n                } catch (e) {\n                    console.error(\"❌ All Tone.js import methods failed:\", e);\n                    console.log(\"\\uD83D\\uDD0D Continuing without audio - solar system will work but without sound\");\n                    // Set up a dummy audio engine that doesn't produce sound but doesn't break the app\n                    Tone = {\n                        start: async ()=>console.log(\"\\uD83D\\uDD24 Dummy audio start called\"),\n                        Transport: {\n                            bpm: {\n                                value: 120\n                            },\n                            start: ()=>console.log(\"\\uD83D\\uDD24 Dummy Transport start called\"),\n                            stop: ()=>console.log(\"\\uD83D\\uDD24 Dummy Transport stop called\"),\n                            cancel: ()=>console.log(\"\\uD83D\\uDD24 Dummy Transport cancel called\")\n                        },\n                        context: {\n                            rawContext: null\n                        },\n                        getContext: ()=>({\n                                rawContext: null\n                            }),\n                        version: \"dummy\"\n                    };\n                    // Set basic initialization state\n                    this.isInitialized = true;\n                    this.audioState = {\n                        isInitialized: true,\n                        isPlaying: false,\n                        hasError: true,\n                        error: {\n                            type: \"initialization\",\n                            message: \"Audio failed to load, continuing without sound\",\n                            timestamp: Date.now(),\n                            recoverable: false\n                        },\n                        contextState: \"unknown\"\n                    };\n                    return; // Skip the rest of initialization\n                }\n            }\n            console.log(\"\\uD83D\\uDD0D Tone.js version:\", Tone.version);\n            console.log(\"\\uD83D\\uDD0D Available Tone constructors:\", Object.keys(Tone).filter((key)=>typeof Tone[key] === \"function\"));\n            console.log(\"\\uD83D\\uDD0D All Tone properties:\", Object.keys(Tone));\n            console.log(\"\\uD83D\\uDD0D Tone.Volume type:\", typeof Tone.Volume);\n            console.log(\"\\uD83D\\uDD0D Tone.Reverb type:\", typeof Tone.Reverb);\n            console.log(\"\\uD83D\\uDD0D Tone.Synth type:\", typeof Tone.Synth);\n            // Start with basic Tone.js functionality - skip effects for now\n            console.log(\"\\uD83D\\uDD0D Skipping effects creation for now, focusing on basic functionality...\");\n            // Create a simple gain node as master volume using Web Audio API directly\n            try {\n                console.log(\"\\uD83D\\uDD0D Creating basic gain node for volume control...\");\n                let audioContext;\n                // Try to get audio context from Tone.js\n                if (Tone && Tone.getContext && typeof Tone.getContext === \"function\") {\n                    audioContext = Tone.getContext().rawContext;\n                    console.log(\"✅ Got audio context from Tone.js\");\n                } else if (Tone && Tone.context && Tone.context.rawContext) {\n                    audioContext = Tone.context.rawContext;\n                    console.log(\"✅ Got audio context from Tone.context\");\n                } else {\n                    // Fallback: create our own audio context\n                    audioContext = new (window.AudioContext || window.webkitAudioContext)();\n                    console.log(\"✅ Created fallback audio context\");\n                }\n                this.masterVolume = audioContext.createGain();\n                this.masterVolume.gain.value = 0.3; // -10dB approximately\n                this.masterVolume.connect(audioContext.destination);\n                this.audioContext = audioContext;\n                console.log(\"✅ Basic gain node created successfully\");\n            } catch (e) {\n                console.log(\"❌ Basic gain node creation failed:\", e);\n                throw new Error(\"Failed to create basic gain node: \".concat(e));\n            }\n            // Set other effects to null for now\n            this.reverb = null;\n            this.compressor = null;\n            this.eq3 = null;\n            this.limiter = null;\n            // No effects chain to connect since we're using basic gain node directly connected to destination\n            // Set up Transport with null checks\n            try {\n                console.log(\"\\uD83D\\uDD0D Setting up Transport...\");\n                if (Tone.Transport && Tone.Transport.bpm) {\n                    Tone.Transport.bpm.value = this.settings.tempo;\n                    console.log(\"✅ Transport BPM set successfully\");\n                } else {\n                    console.log(\"⚠️ Tone.Transport not available, skipping Transport setup\");\n                }\n            } catch (e) {\n                console.log(\"❌ Transport setup failed:\", e);\n            // Don't throw here, Transport is not critical for basic functionality\n            }\n            // Store audio context reference\n            try {\n                if (Tone.context && Tone.context.rawContext) {\n                    this.audioContext = Tone.context.rawContext;\n                    console.log(\"✅ Audio context reference stored\");\n                } else {\n                    console.log(\"⚠️ Tone.context not available, using fallback context\");\n                // We already created a fallback context earlier\n                }\n            } catch (e) {\n                console.log(\"❌ Audio context reference storage failed:\", e);\n            }\n            this.isInitialized = true;\n            this.audioState.isInitialized = true;\n            this.updateContextState();\n            this.clearError(); // Clear any previous errors\n            console.log(\"\\uD83C\\uDFB5 Celestial Audio Engine initialized successfully\");\n        } catch (error) {\n            const audioError = {\n                type: \"initialization\",\n                message: error instanceof Error ? error.message : \"Unknown initialization error\",\n                timestamp: Date.now(),\n                recoverable: true\n            };\n            console.error(\"Failed to initialize audio engine:\", error);\n            this.reportError(audioError);\n            // Attempt recovery\n            const recovered = await this.attemptRecovery(audioError);\n            if (!recovered) {\n                throw error;\n            }\n        }\n    }\n    /**\n   * Map planetary distance to frequency using inverse relationship\n   * Closer planets = higher frequencies (200-800Hz range)\n   */ mapDistanceToFrequency(distanceFromSun) {\n        // Inverse mapping: closer planets get higher frequencies\n        const minDistance = 0.39; // Mercury\n        const maxDistance = 39.48; // Neptune\n        // Inverse relationship with some logarithmic scaling\n        const normalizedDistance = (distanceFromSun - minDistance) / (maxDistance - minDistance);\n        const inverseFactor = 1 - normalizedDistance;\n        // Map to frequency range (200Hz to 800Hz)\n        const minFreq = 200;\n        const maxFreq = 800;\n        // Apply logarithmic scaling for more musical results\n        const frequency = minFreq + (maxFreq - minFreq) * Math.pow(inverseFactor, 0.7);\n        return Math.round(frequency * 100) / 100; // Round to 2 decimal places\n    }\n    /**\n   * Create a unique synth for each planet with celestial characteristics\n   */ createPlanetSynth(planet) {\n        try {\n            if (!Tone) {\n                throw new Error(\"Tone.js is not available\");\n            }\n            const frequency = this.mapDistanceToFrequency(planet.distanceFromSun);\n            // Different oscillator types based on planet characteristics\n            let oscillatorType = \"sine\";\n            if (planet.distanceFromSun < 1) {\n                oscillatorType = \"triangle\"; // Inner planets: softer, warmer\n            } else if (planet.distanceFromSun > 10) {\n                oscillatorType = \"square\"; // Outer planets: more complex, alien\n            } else {\n                oscillatorType = \"sawtooth\"; // Middle planets: balanced\n            }\n            // Create basic synth using Web Audio API or Tone.js if available\n            let synth;\n            try {\n                console.log(\"\\uD83D\\uDD0D Creating synth for planet:\", planet.name);\n                // Try to use Tone.js Synth if available\n                if (Tone.Synth && typeof Tone.Synth === \"function\") {\n                    synth = new Tone.Synth({\n                        oscillator: {\n                            type: oscillatorType\n                        },\n                        envelope: {\n                            attack: this.calculateAttackTime(planet),\n                            decay: 0.1,\n                            sustain: 0.3,\n                            release: this.calculateReleaseTime(planet)\n                        }\n                    });\n                    console.log(\"✅ Tone.js Synth created successfully for planet:\", planet.name);\n                } else {\n                    // Fallback: create basic oscillator using Web Audio API\n                    console.log(\"\\uD83D\\uDD0D Tone.js Synth not available, using Web Audio API fallback...\");\n                    const audioContext = this.audioContext || new (window.AudioContext || window.webkitAudioContext)();\n                    const oscillator = audioContext.createOscillator();\n                    const gainNode = audioContext.createGain();\n                    oscillator.type = oscillatorType;\n                    oscillator.frequency.value = frequency;\n                    // Basic envelope simulation\n                    gainNode.gain.setValueAtTime(0, audioContext.currentTime);\n                    gainNode.gain.linearRampToValueAtTime(0.3, audioContext.currentTime + this.calculateAttackTime(planet));\n                    gainNode.gain.linearRampToValueAtTime(0.1, audioContext.currentTime + this.calculateAttackTime(planet) + 0.1);\n                    oscillator.connect(gainNode);\n                    gainNode.connect(this.masterVolume);\n                    synth = {\n                        oscillator: oscillator,\n                        gainNode: gainNode,\n                        connect: (destination)=>{\n                            gainNode.connect(destination);\n                        },\n                        toDestination: ()=>{\n                            gainNode.connect(this.masterVolume);\n                        },\n                        start: (time)=>{\n                            oscillator.start(time || audioContext.currentTime);\n                        },\n                        stop: (time)=>{\n                            oscillator.stop(time || audioContext.currentTime);\n                        }\n                    };\n                    console.log(\"✅ Web Audio API fallback synth created successfully for planet:\", planet.name);\n                }\n            } catch (e) {\n                console.log(\"❌ Synth creation failed for planet:\", planet.name, e);\n                throw new Error(\"Failed to create synth for planet \".concat(planet.name, \": \").concat(e));\n            }\n            // Create tremolo effect (simplified)\n            let tremolo = null;\n            try {\n                console.log(\"\\uD83D\\uDD0D Creating tremolo for planet:\", planet.name);\n                // Try to use Tone.js Tremolo if available\n                if (Tone.Tremolo && typeof Tone.Tremolo === \"function\") {\n                    tremolo = new Tone.Tremolo({\n                        frequency: this.calculateTremoloRate(planet),\n                        depth: 0.3,\n                        type: \"sine\"\n                    });\n                    tremolo.start();\n                    console.log(\"✅ Tone.js Tremolo created successfully for planet:\", planet.name);\n                    // Connect synth -> tremolo -> master volume\n                    synth.connect(tremolo);\n                    tremolo.connect(this.masterVolume);\n                } else {\n                    console.log(\"\\uD83D\\uDD0D Tone.js Tremolo not available, skipping tremolo effect\");\n                    // Connect synth directly to master volume\n                    synth.connect(this.masterVolume);\n                }\n            } catch (e) {\n                console.log(\"❌ Tremolo creation failed for planet:\", planet.name, e);\n                // Fallback: connect synth directly to master volume\n                synth.connect(this.masterVolume);\n            }\n            // Store references\n            const synthData = {\n                synth,\n                tremolo,\n                frequency\n            };\n            this.synths.set(planet.id, synthData);\n            this.tremolos.set(planet.id, tremolo);\n            // Initialize planet state\n            this.planetStates.set(planet.id, {\n                isMuted: planet.isMuted || false,\n                volume: 0.8,\n                frequency: frequency\n            });\n            return synthData;\n        } catch (error) {\n            console.error(\"Error creating synth for planet \".concat(planet.name, \":\"), error);\n            const audioError = {\n                type: \"initialization\",\n                message: \"Error creating synth for planet \".concat(planet.name, \": \").concat(error instanceof Error ? error.message : \"Unknown error\"),\n                timestamp: Date.now(),\n                recoverable: false // Individual planet synth creation errors are not recoverable\n            };\n            this.reportError(audioError);\n            return null;\n        }\n    }\n    /**\n   * Calculate attack time based on planet's orbital velocity\n   */ calculateAttackTime(planet) {\n        const velocity = (0,_orbital_mechanics__WEBPACK_IMPORTED_MODULE_0__.calculateOrbitalVelocity)(planet);\n        return Math.max(0.05, 0.5 - velocity * 0.4); // Faster planets = quicker attack\n    }\n    /**\n   * Calculate release time based on planet's distance from sun\n   */ calculateReleaseTime(planet) {\n        return Math.max(1, planet.distanceFromSun * 0.5); // Farther planets = longer release\n    }\n    /**\n   * Calculate tremolo rate based on planet's orbital period\n   */ calculateTremoloRate(planet) {\n        // Map orbital period to tremolo frequency (slower planets = slower tremolo)\n        return Math.max(0.5, Math.min(8, 365 / planet.orbitalPeriod));\n    }\n    /**\n   * Generate musical pattern based on orbital characteristics\n   */ generatePlanetPattern(planet) {\n        const velocity = (0,_orbital_mechanics__WEBPACK_IMPORTED_MODULE_0__.calculateOrbitalVelocity)(planet);\n        const patternLength = Math.max(4, Math.min(16, Math.floor(planet.orbitalPeriod / 50)));\n        const pattern = [];\n        for(let i = 0; i < patternLength; i++){\n            // Create rhythm based on orbital characteristics\n            if (velocity > 0.4) {\n                // Fast planets: more frequent notes\n                pattern.push(i % 2 === 0 ? 1 : 0);\n            } else if (velocity > 0.2) {\n                // Medium planets: moderate rhythm\n                pattern.push(i % 3 === 0 ? 1 : i % 3 === 1 ? 0.5 : 0);\n            } else {\n                // Slow planets: sparse notes\n                pattern.push(i % 4 === 0 ? 1 : 0);\n            }\n        }\n        return pattern;\n    }\n    /**\n   * Initialize all planets for audio playback\n   */ async initializePlanets(planets) {\n        try {\n            if (!this.isInitialized) {\n                await this.initialize();\n            }\n            let successCount = 0;\n            planets.forEach((planet)=>{\n                const synth = this.createPlanetSynth(planet);\n                if (synth) {\n                    successCount++;\n                }\n            });\n            if (successCount === 0) {\n                throw new Error(\"Failed to initialize any planet synths\");\n            }\n            console.log(\"\\uD83E\\uDE90 \".concat(successCount, \"/\").concat(planets.length, \" planets initialized for audio playback\"));\n        } catch (error) {\n            console.error(\"Error initializing planets:\", error);\n            const audioError = {\n                type: \"initialization\",\n                message: \"Error initializing planets: \".concat(error instanceof Error ? error.message : \"Unknown error\"),\n                timestamp: Date.now(),\n                recoverable: true\n            };\n            this.reportError(audioError);\n            // Attempt recovery\n            const recovered = await this.attemptRecovery(audioError);\n            if (!recovered) {\n                throw error;\n            }\n        }\n    }\n    /**\n   * Start the celestial symphony\n   */ async start() {\n        try {\n            if (!this.isInitialized) {\n                await this.initialize();\n            }\n            // If we have a dummy audio context (audio failed to load), just update state and return\n            if (!this.audioContext && this.audioState.hasError) {\n                console.log(\"\\uD83D\\uDD24 Starting with dummy audio (no sound)\");\n                this.settings.isPlaying = true;\n                this.audioState.isPlaying = true;\n                this.updateContextState();\n                return;\n            }\n            if (!this.audioContext) {\n                throw new Error(\"Audio context not available\");\n            }\n            // Resume audio context if suspended (browser autoplay policy)\n            if (this.audioContext.state === \"suspended\") {\n                try {\n                    await this.audioContext.resume();\n                    this.updateContextState();\n                } catch (contextError) {\n                    const audioError = {\n                        type: \"context\",\n                        message: \"Failed to resume audio context: \".concat(contextError instanceof Error ? contextError.message : \"Unknown error\"),\n                        timestamp: Date.now(),\n                        recoverable: true\n                    };\n                    this.reportError(audioError);\n                    // Attempt recovery\n                    const recovered = await this.attemptRecovery(audioError);\n                    if (!recovered) {\n                        throw contextError;\n                    }\n                }\n            }\n            // Initialize planets if not already done\n            if (this.planetStates.size === 0) {\n                console.log(\"\\uD83E\\uDE90 Initializing planets for audio playback...\");\n                await this.initializePlanets(_data_planets__WEBPACK_IMPORTED_MODULE_1__.PLANETS);\n            }\n            // Start all planet loops\n            this.startPlanetLoops();\n            this.settings.isPlaying = true;\n            this.audioState.isPlaying = true;\n            this.updateContextState();\n            this.clearError(); // Clear any previous errors\n            console.log(\"\\uD83C\\uDFB5 Celestial symphony started\");\n        } catch (error) {\n            const audioError = {\n                type: \"playback\",\n                message: error instanceof Error ? error.message : \"Unknown playback error\",\n                timestamp: Date.now(),\n                recoverable: true\n            };\n            console.error(\"Failed to start audio:\", error);\n            this.reportError(audioError);\n            // Attempt recovery\n            const recovered = await this.attemptRecovery(audioError);\n            if (!recovered) {\n                throw error;\n            }\n        }\n    }\n    /**\n   * Start planet loops using Tone.Transport or Web Audio API scheduling\n   */ startPlanetLoops() {\n        // Start Transport if available and not already running\n        if (Tone && Tone.Transport) {\n            try {\n                if (Tone.Transport.state !== \"started\") {\n                    Tone.Transport.start();\n                    console.log(\"✅ Transport started successfully\");\n                }\n            } catch (e) {\n                console.log(\"❌ Transport start failed:\", e);\n            }\n        } else {\n            console.log(\"\\uD83D\\uDD0D Using Web Audio API scheduling (Tone.Transport not available)\");\n        }\n        // Schedule all planets\n        this.planetStates.forEach((state, planetId)=>{\n            if (!state.isMuted) {\n                this.schedulePlanet(planetId);\n            }\n        });\n    }\n    /**\n   * Stop planet loops using Tone.Transport or Web Audio API\n   */ stopPlanetLoops() {\n        // Stop all planet loops\n        this.loops.forEach((loop, planetId)=>{\n            if (loop) {\n                try {\n                    if (loop.dispose) {\n                        // Tone.js loop\n                        loop.dispose();\n                    } else if (loop.stop) {\n                        // Web Audio API loop\n                        loop.stop();\n                    }\n                    console.log(\"✅ Stopped loop for planet \".concat(planetId));\n                } catch (e) {\n                    console.log(\"❌ Loop stop failed for planet:\", planetId, e);\n                }\n            }\n        });\n        // Clear the loops map\n        this.loops.clear();\n        // Stop Transport if it's running\n        if (Tone && Tone.Transport) {\n            try {\n                if (Tone.Transport.state === \"started\") {\n                    Tone.Transport.stop();\n                    console.log(\"✅ Transport stopped successfully\");\n                }\n            } catch (e) {\n                console.log(\"❌ Transport stop failed:\", e);\n            }\n        }\n    }\n    /**\n   * Schedule a planet's audio events using Tone.Transport or Web Audio API\n   */ schedulePlanet(planetId) {\n        try {\n            if (!this.settings.isPlaying) return;\n            const synthData = this.synths.get(planetId);\n            const state = this.planetStates.get(planetId);\n            if (!synthData || !state || state.isMuted) return;\n            // Calculate interval based on planet's orbital period\n            const intervalMs = this.calculatePlanetInterval(planetId);\n            // Use Tone.Transport if available, otherwise use Web Audio API scheduling\n            if (Tone && Tone.Transport && synthData.synth && synthData.synth.triggerAttackRelease) {\n                // Tone.js scheduling\n                const intervalBeats = intervalMs / 1000 * (this.settings.tempo / 60); // Convert ms to beats\n                // Create a repeating loop for this planet\n                const planetLoop = new Tone.Loop((time)=>{\n                    try {\n                        // Trigger note on the Tone.js synth\n                        synthData.synth.triggerAttackRelease(synthData.frequency, \"8n\", time, state.volume * 0.3 // Velocity based on planet volume\n                        );\n                    } catch (error) {\n                        console.error(\"Error triggering Tone.js note for planet \".concat(planetId, \":\"), error);\n                    }\n                }, intervalBeats);\n                // Start the loop\n                planetLoop.start(0);\n                // Store the loop reference\n                this.loops.set(planetId, planetLoop);\n            } else if (synthData.synth && synthData.synth.oscillator && this.audioContext) {\n                // Web Audio API fallback scheduling\n                console.log(\"\\uD83D\\uDD0D Using Web Audio API scheduling for planet \".concat(planetId));\n                // Create a simple oscillator-based loop\n                const playNote = ()=>{\n                    if (!this.settings.isPlaying || state.isMuted) return;\n                    try {\n                        // Create a new oscillator for each note (simple approach)\n                        const oscillator = this.audioContext.createOscillator();\n                        const gainNode = this.audioContext.createGain();\n                        oscillator.type = synthData.synth.oscillator.type || \"sine\";\n                        oscillator.frequency.value = synthData.frequency;\n                        // Connect to master volume\n                        oscillator.connect(gainNode);\n                        gainNode.connect(this.masterVolume);\n                        // Simple envelope\n                        const now = this.audioContext.currentTime;\n                        gainNode.gain.setValueAtTime(0, now);\n                        gainNode.gain.linearRampToValueAtTime(state.volume * 0.3, now + 0.1); // Attack\n                        gainNode.gain.linearRampToValueAtTime(0, now + 0.3); // Release\n                        // Start and stop the oscillator\n                        oscillator.start(now);\n                        oscillator.stop(now + 0.3);\n                        // Schedule next note\n                        if (this.settings.isPlaying && !state.isMuted) {\n                            setTimeout(playNote, intervalMs);\n                        }\n                    } catch (error) {\n                        console.error(\"Error playing Web Audio API note for planet \".concat(planetId, \":\"), error);\n                    }\n                };\n                // Start playing\n                playNote();\n                // Store a reference to the play function for cleanup\n                this.loops.set(planetId, {\n                    stop: ()=>{\n                        // The loop will stop itself when isPlaying becomes false\n                        console.log(\"\\uD83D\\uDD0D Stopped Web Audio API loop for planet \".concat(planetId));\n                    }\n                });\n            } else {\n                console.log(\"⚠️ No valid synth available for planet \".concat(planetId));\n            }\n        } catch (error) {\n            console.error(\"Error scheduling planet \".concat(planetId, \":\"), error);\n            const audioError = {\n                type: \"playback\",\n                message: \"Error scheduling planet \".concat(planetId, \": \").concat(error instanceof Error ? error.message : \"Unknown error\"),\n                timestamp: Date.now(),\n                recoverable: false\n            };\n            this.reportError(audioError);\n        }\n    }\n    /**\n   * Calculate planet interval based on orbital period\n   */ calculatePlanetInterval(planetId) {\n        // This should be based on the planet's orbital period\n        // For now, use a simple mapping\n        const baseInterval = 2000; // 2 seconds\n        const planetMultipliers = {\n            \"mercury\": 0.5,\n            \"venus\": 0.8,\n            \"earth\": 1.0,\n            \"mars\": 1.5,\n            \"jupiter\": 2.0,\n            \"saturn\": 2.5,\n            \"uranus\": 3.0,\n            \"neptune\": 3.5\n        };\n        const multiplier = planetMultipliers[planetId.toLowerCase()] || 1.0;\n        return baseInterval * multiplier / (this.settings.tempo / 120);\n    }\n    /**\n   * Stop the celestial symphony\n   */ stop() {\n        try {\n            // If we have dummy audio (audio failed to load), just update state and return\n            if (!this.audioContext && this.audioState.hasError) {\n                console.log(\"\\uD83D\\uDD24 Stopping dummy audio (no sound)\");\n                this.settings.isPlaying = false;\n                this.audioState.isPlaying = false;\n                this.updateContextState();\n                return;\n            }\n            // Stop all planet loops\n            this.stopPlanetLoops();\n            // Stop all oscillators\n            this.synths.forEach((synth, planetId)=>{\n                try {\n                    if (synth && synth.oscillator && this.audioContext) {\n                        synth.gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);\n                    }\n                } catch (error) {\n                    console.error(\"Error stopping synth for planet \".concat(planetId, \":\"), error);\n                }\n            });\n            this.settings.isPlaying = false;\n            this.audioState.isPlaying = false;\n            this.updateContextState();\n            console.log(\"\\uD83D\\uDD07 Celestial symphony stopped\");\n        } catch (error) {\n            const audioError = {\n                type: \"playback\",\n                message: error instanceof Error ? error.message : \"Unknown error stopping playback\",\n                timestamp: Date.now(),\n                recoverable: false // Stopping should not be recoverable as it's a user action\n            };\n            console.error(\"Error stopping audio:\", error);\n            this.reportError(audioError);\n        }\n    }\n    /**\n   * Set master volume (0.0 to 1.0)\n   */ setMasterVolume(volume) {\n        try {\n            this.settings.volume = Math.max(0, Math.min(1, volume));\n            if (this.masterVolume) {\n                // Convert linear volume to gain (0-1 range)\n                this.masterVolume.gain.value = this.settings.volume * 0.5;\n            }\n        } catch (error) {\n            console.error(\"Error setting master volume:\", error);\n            const audioError = {\n                type: \"playback\",\n                message: \"Error setting master volume: \".concat(error instanceof Error ? error.message : \"Unknown error\"),\n                timestamp: Date.now(),\n                recoverable: false // Volume control errors are not critical\n            };\n            this.reportError(audioError);\n        }\n    }\n    /**\n   * Set tempo (BPM)\n   */ setTempo(bpm) {\n        try {\n            this.settings.tempo = Math.max(60, Math.min(180, bpm));\n            // Tempo affects the scheduling intervals, restart loops if playing\n            if (this.settings.isPlaying) {\n                this.stopPlanetLoops();\n                this.startPlanetLoops();\n            }\n        } catch (error) {\n            console.error(\"Error setting tempo:\", error);\n            const audioError = {\n                type: \"playback\",\n                message: \"Error setting tempo: \".concat(error instanceof Error ? error.message : \"Unknown error\"),\n                timestamp: Date.now(),\n                recoverable: false // Tempo control errors are not critical\n            };\n            this.reportError(audioError);\n        }\n    }\n    /**\n   * Set time multiplier for orbital speed\n   */ setTimeMultiplier(multiplier) {\n        try {\n            this.timeMultiplier = Math.max(1, Math.min(10000, multiplier));\n            // Restart loops with new timing\n            if (this.settings.isPlaying) {\n                this.stopPlanetLoops();\n                this.startPlanetLoops();\n            }\n        } catch (error) {\n            console.error(\"Error setting time multiplier:\", error);\n            const audioError = {\n                type: \"playback\",\n                message: \"Error setting time multiplier: \".concat(error instanceof Error ? error.message : \"Unknown error\"),\n                timestamp: Date.now(),\n                recoverable: false // Time multiplier errors are not critical\n            };\n            this.reportError(audioError);\n        }\n    }\n    /**\n   * Set mute state for a specific planet\n   */ setPlanetMute(planetId, isMuted) {\n        try {\n            const planetState = this.planetStates.get(planetId);\n            if (planetState) {\n                planetState.isMuted = isMuted;\n                if (isMuted) {\n                    // Stop the planet's audio\n                    const synth = this.synths.get(planetId);\n                    if (synth && synth.gainNode && this.audioContext) {\n                        synth.gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);\n                    }\n                } else if (this.settings.isPlaying) {\n                    // Start the planet's audio if currently playing\n                    this.schedulePlanet(planetId);\n                }\n                console.log(\"\".concat(planetId, \" \").concat(isMuted ? \"muted\" : \"unmuted\"));\n            }\n        } catch (error) {\n            console.error(\"Error setting mute state for planet \".concat(planetId, \":\"), error);\n            const audioError = {\n                type: \"playback\",\n                message: \"Error setting mute state for planet \".concat(planetId, \": \").concat(error instanceof Error ? error.message : \"Unknown error\"),\n                timestamp: Date.now(),\n                recoverable: false // Planet mute errors are not critical\n            };\n            this.reportError(audioError);\n        }\n    }\n    /**\n   * Toggle mute state for a specific planet\n   */ togglePlanetMute(planetId) {\n        const planetState = this.planetStates.get(planetId);\n        if (planetState) {\n            this.setPlanetMute(planetId, !planetState.isMuted);\n        }\n    }\n    /**\n   * Set individual planet volume\n   */ setPlanetVolume(planetId, volume) {\n        try {\n            const planetState = this.planetStates.get(planetId);\n            if (planetState) {\n                planetState.volume = Math.max(0, Math.min(1, volume));\n            }\n        } catch (error) {\n            console.error(\"Error setting volume for planet \".concat(planetId, \":\"), error);\n            const audioError = {\n                type: \"playback\",\n                message: \"Error setting volume for planet \".concat(planetId, \": \").concat(error instanceof Error ? error.message : \"Unknown error\"),\n                timestamp: Date.now(),\n                recoverable: false // Planet volume errors are not critical\n            };\n            this.reportError(audioError);\n        }\n    }\n    /**\n   * Get current audio settings\n   */ getSettings() {\n        return {\n            ...this.settings\n        };\n    }\n    /**\n   * Get planet audio state\n   */ getPlanetState(planetId) {\n        return this.planetStates.get(planetId) || null;\n    }\n    /**\n   * Report an error to all registered error callbacks\n   */ reportError(error) {\n        this.audioState.hasError = true;\n        this.audioState.error = error;\n        // Notify all error callbacks\n        this.errorCallbacks.forEach((callback)=>{\n            try {\n                callback(error);\n            } catch (callbackError) {\n                console.error(\"Error in error callback:\", callbackError);\n            }\n        });\n        // Also notify state change callbacks\n        this.notifyStateChange();\n    }\n    /**\n   * Notify all state change callbacks of current audio state\n   */ notifyStateChange() {\n        this.stateChangeCallbacks.forEach((callback)=>{\n            try {\n                callback({\n                    ...this.audioState\n                });\n            } catch (callbackError) {\n                console.error(\"Error in state change callback:\", callbackError);\n            }\n        });\n    }\n    /**\n   * Update audio context state\n   */ updateContextState() {\n        if (this.audioContext) {\n            this.audioState.contextState = this.audioContext.state;\n        } else {\n            this.audioState.contextState = \"unknown\";\n        }\n        this.notifyStateChange();\n    }\n    /**\n   * Attempt to recover from an error\n   */ async attemptRecovery(error) {\n        if (!error.recoverable || this.retryCount >= this.maxRetries) {\n            return false;\n        }\n        this.retryCount++;\n        console.log(\"Attempting recovery (\".concat(this.retryCount, \"/\").concat(this.maxRetries, \") for error: \").concat(error.message));\n        try {\n            switch(error.type){\n                case \"context\":\n                    // Try to resume audio context\n                    if (this.audioContext && this.audioContext.state === \"suspended\") {\n                        await this.audioContext.resume();\n                        this.updateContextState();\n                        return true;\n                    }\n                    break;\n                case \"initialization\":\n                    // Try to reinitialize\n                    await this.initialize();\n                    return true;\n                case \"playback\":\n                    // Try to restart playback\n                    if (this.settings.isPlaying) {\n                        await this.start();\n                        return true;\n                    }\n                    break;\n                default:\n                    // For unknown errors, try a full reinitialization\n                    this.dispose();\n                    await this.initialize();\n                    return true;\n            }\n        } catch (recoveryError) {\n            console.error(\"Recovery attempt failed:\", recoveryError);\n            // Report recovery error\n            this.reportError({\n                type: \"unknown\",\n                message: \"Recovery failed: \".concat(recoveryError instanceof Error ? recoveryError.message : \"Unknown error\"),\n                timestamp: Date.now(),\n                recoverable: false\n            });\n        }\n        return false;\n    }\n    /**\n   * Add error callback\n   */ onError(callback) {\n        this.errorCallbacks.add(callback);\n    }\n    /**\n   * Remove error callback\n   */ offError(callback) {\n        this.errorCallbacks.delete(callback);\n    }\n    /**\n   * Add state change callback\n   */ onStateChange(callback) {\n        this.stateChangeCallbacks.add(callback);\n    }\n    /**\n   * Remove state change callback\n   */ offStateChange(callback) {\n        this.stateChangeCallbacks.delete(callback);\n    }\n    /**\n   * Get current audio state\n   */ getAudioState() {\n        return {\n            ...this.audioState\n        };\n    }\n    /**\n   * Clear any current error state\n   */ clearError() {\n        this.audioState.hasError = false;\n        this.audioState.error = null;\n        this.retryCount = 0;\n        this.notifyStateChange();\n    }\n    /**\n   * Clean up all audio resources\n   */ dispose() {\n        this.stop();\n        // Stop and disconnect all oscillators\n        this.synths.forEach((synth, planetId)=>{\n            try {\n                if (synth && synth.oscillator) {\n                    synth.oscillator.stop();\n                    synth.oscillator.disconnect();\n                    synth.gainNode.disconnect();\n                    if (synth.tremoloOscillator) {\n                        synth.tremoloOscillator.stop();\n                        synth.tremoloOscillator.disconnect();\n                    }\n                    if (synth.tremoloGain) {\n                        synth.tremoloGain.disconnect();\n                    }\n                }\n            } catch (error) {\n                console.error(\"Error disposing synth for planet \".concat(planetId, \":\"), error);\n            }\n        });\n        // Clear all maps\n        this.synths.clear();\n        this.loops.clear();\n        this.tremolos.clear();\n        this.planetStates.clear();\n        this.scheduledEvents.clear();\n        // Disconnect master effects\n        try {\n            if (this.masterVolume) this.masterVolume.disconnect();\n            if (this.compressor) this.compressor.disconnect();\n            if (this.eq3) {\n                this.eq3.low.disconnect();\n                this.eq3.mid.disconnect();\n                this.eq3.high.disconnect();\n            }\n            if (this.limiter) this.limiter.disconnect();\n        } catch (error) {\n            console.error(\"Error disconnecting master effects:\", error);\n        }\n        // Close audio context\n        if (this.audioContext) {\n            try {\n                this.audioContext.close();\n            } catch (error) {\n                console.error(\"Error closing audio context:\", error);\n            }\n            this.audioContext = null;\n        }\n        this.isInitialized = false;\n        this.audioState.isInitialized = false;\n        this.audioState.isPlaying = false;\n        this.updateContextState();\n        console.log(\"\\uD83E\\uDDF9 Audio engine disposed\");\n    }\n    // Calculate frequency based on planet distance from sun\n    calculateFrequency(planet) {\n        // Map planet distance to frequency (closer planets = higher frequency)\n        // Using logarithmic scaling for better musical distribution\n        const minFreq = 110; // A2\n        const maxFreq = 880; // A5\n        const logMin = Math.log(0.4); // Mercury distance\n        const logMax = Math.log(30); // Neptune distance\n        const normalizedDistance = (Math.log(planet.distanceFromSun) - logMin) / (logMax - logMin);\n        const frequency = maxFreq - normalizedDistance * (maxFreq - minFreq);\n        return Math.max(minFreq, Math.min(maxFreq, frequency));\n    }\n    constructor(){\n        this.synths = new Map();\n        this.loops = new Map();\n        this.tremolos = new Map();\n        this.isInitialized = false;\n        this.planetStates = new Map();\n        this.timeMultiplier = 1000;\n        this.settings = {\n            isPlaying: false,\n            volume: 0.7,\n            tempo: 120\n        };\n        // Create master effects chain - will be initialized in initialize() method\n        this.masterVolume = null;\n        this.reverb = null;\n        this.compressor = null;\n        this.eq3 = null;\n        this.limiter = null;\n        this.audioContext = null;\n        this.scheduledEvents = new Set();\n        // Initialize error handling\n        this.audioState = {\n            isInitialized: false,\n            isPlaying: false,\n            hasError: false,\n            error: null,\n            contextState: \"unknown\"\n        };\n        this.errorCallbacks = new Set();\n        this.stateChangeCallbacks = new Set();\n        this.maxRetries = 3;\n        this.retryCount = 0;\n    }\n}\n// Singleton instance\nlet audioEngine = null;\nfunction getAudioEngine() {\n    if (!audioEngine) {\n        audioEngine = new CelestialAudioEngine();\n    }\n    return audioEngine;\n}\nfunction resetAudioEngine() {\n    if (audioEngine) {\n        audioEngine.dispose();\n        audioEngine = null;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/audioEngine.ts\n"));

/***/ })

});